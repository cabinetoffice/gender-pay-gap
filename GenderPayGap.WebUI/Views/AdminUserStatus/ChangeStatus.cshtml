@using GenderPayGap.Core
@using GenderPayGap.WebUI.Helpers
@using GenderPayGap.WebUI.Models.Admin
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.WebUI.Models.Admin.AdminChangeUserStatusViewModel

@{
    ViewBag.Title = "Change user status - Administration - Gender pay gap service";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Admin",
                Href = Url.Action("AdminHomePage", "AdminHomepage")
            },
            new CrumbViewModel
            {
                Text = Model.User.Fullname,
                Href = Url.Action("ViewUser", "AdminViewUser", new {id = Model.User.UserId})
            },
            new CrumbViewModel
            {
                Text = "Status history",
                Href = Url.Action("ViewStatusHistory", "AdminUserStatus", new {id = Model.User.UserId})
            },
            new CrumbViewModel
            {
                Text = "Change status"
            }
        };
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

@{
    var statusHints = new Dictionary<UserStatuses, string>
    {
        {
            UserStatuses.Active,
            "A user should be Active if they want to use their account."
        },
        {
            UserStatuses.Retired,
            "A user should be Retired if they no longer need the account, or the account was created by mistake."
        }
    };

    var items = new List<ItemViewModel>();

    foreach ((UserStatuses status, string hint) in statusHints)
    {
        if (Model.User.Status != status)
        {
            string fieldName = $"GovUk_Radio_{nameof(AdminChangeUserStatusViewModel.NewStatus)}";
            string fieldId = $"{fieldName}_{status}";

            items.Add(new RadioItemViewModel
            {
                Name = fieldName,
                Value = status.ToString(),
                Id = fieldId,
                Checked = Model.NewStatus == status,
                Label = new LabelViewModel
                {
                    Text = status.ToString(),
                    For = fieldId
                },
                Hint = new HintViewModel
                {
                    Text = hint
                }
            });
        }
    }

}

<span class="govuk-caption-xl">Administration</span>
<h1 class="govuk-heading-xl">
    Change status
    <br/>
    <span class="govuk-!-font-size-27">
        for @(Model.User.Fullname)
    </span>
</h1>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <form method="POST" action="@Url.Action("ChangeStatusPost", "AdminUserStatus", new {id = Model.User.UserId})">
            @(Html.AntiForgeryToken())

            @(Html.Hidden(nameof(AdminChangeUserStatusViewModel.Action),
                ChangeUserStatusViewModelActions.OfferNewStatusAndReason))

            @await Html.GovUkErrorSummary(ViewData.ModelState)


            <table class="govuk-table">
                <tbody class="govuk-table__body">
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">User name</th>
                        <td class="govuk-table__cell">@(Model.User.Fullname)</td>
                    </tr>
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">Current status</th>
                        <td class="govuk-table__cell">@(Model.User.Status)</td>
                    </tr>
                </tbody>
            </table>

            <div class="govuk-form-group">
                @{
                    string error = ModelErrorHelper.GetErrorMessage(ViewData.ModelState, nameof(Model.NewStatus));
                    ErrorMessageViewModel radiosErrorMessageViewModel = error != null ? new ErrorMessageViewModel {Text = error} : null;
                }
                @await Html.GovUkRadios(new RadiosViewModel
                {
                    Name = nameof(AdminChangeUserStatusViewModel.NewStatus),
                    Fieldset = new FieldsetViewModel
                    {
                        Legend = new LegendViewModel
                        {
                            Text = "Please select a new status",
                            Classes = "govuk-fieldset__legend--m"
                        },
                        Classes = "govuk-!-margin-top-6"
                    },
                    Items = items,
                    ErrorMessage = radiosErrorMessageViewModel
                })

                @await Html.GovUkCharacterCountFor(
                    m => m.Reason,
                    labelOptions: new LabelViewModel
                    {
                        Text = "What is the reason for this change?",
                        Classes = "govuk-label--m"
                    },
                    formGroupOptions: new FormGroupViewModel
                    {
                        Classes = "govuk-!-margin-top-6"
                    })

                @(await Html.GovUkButton(new ButtonViewModel
                {
                    Text = "Continue",
                    Classes = "govuk-!-margin-bottom-4",
                    PreventDoubleClick = true
                }))

                <p class="govuk-body">
                    <a href="@Url.Action("ViewUser", "AdminViewUser", new {id = Model.User.UserId})"
                       class="govuk-link">
                        Cancel and return to user page
                    </a>
                </p>

            </div>
        </form>
    </div>
</div>
