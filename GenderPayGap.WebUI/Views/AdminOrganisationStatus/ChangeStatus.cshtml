@using GenderPayGap.Core
@using GenderPayGap.Core.Helpers
@using GenderPayGap.Database
@using GenderPayGap.WebUI.Helpers
@using GenderPayGap.WebUI.Models.Admin
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model GenderPayGap.WebUI.Models.Admin.AdminChangeOrganisationStatusViewModel

@{
    ViewBag.Title = "Change status - Administration - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Admin",
                Href = Url.Action("AdminHomePage", "AdminHomepage")
            },
            new CrumbViewModel
            {
                Text = Model.Organisation.OrganisationName,
                Href = Url.Action("ViewOrganisation", "AdminViewOrganisation", new {id = Model.Organisation.OrganisationId})
            },
            new CrumbViewModel
            {
                Text = "Status history",
                Href = Url.Action("ViewStatusHistory", "AdminOrganisationStatus", new {id = Model.Organisation.OrganisationId})
            },
            new CrumbViewModel
            {
                Text = "Change status"
            }
        };
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

@{
    var statusHints = new Dictionary<OrganisationStatuses, string>
    {
        {
            OrganisationStatuses.Active,
            "An organisation should be Active if it is trading."
        },
        {
            OrganisationStatuses.Retired,
            "An organisation should be Retired if it has ceased trading. It will remain searchable and submissions will remain visible."
        },
        {
            OrganisationStatuses.Deleted,
            "An organisation should be Deleted if it was created by mistake / there was no reason for it to ever exist in the service. Any submissions will no longer be shown in the public viewing service."
        },
    };

    var items = new List<ItemViewModel>();

    foreach ((OrganisationStatuses status, string hint) in statusHints)
    {
        if (Model.Organisation.Status != status)
        {
            string fieldName = $"GovUk_Radio_{nameof(AdminChangeOrganisationStatusViewModel.NewStatus)}";
            string fieldId = $"{fieldName}_{status}";

            items.Add(new RadioItemViewModel
            {
                Name = fieldName,
                Value = status.ToString(),
                Id = fieldId,
                Checked = Model.NewStatus == status,
                Label = new LabelViewModel
                {
                    Text = status.ToString(),
                    For = fieldId
                },
                Hint = new HintViewModel
                {
                    Text = hint
                }
            });
        }
    }

}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        <span class="govuk-caption-xl">Administration</span>
        <h1 class="govuk-heading-xl">
            Change status
            <br/>
            <span class="govuk-!-font-size-27">
                for @(Model.Organisation.OrganisationName)
            </span>
        </h1>
        
        @await Html.GovUkErrorSummary(ViewData.ModelState)

    </div>
</div>

<form method="POST" action="@Url.Action("ChangeStatusPost", "AdminOrganisationStatus", new {id = Model.Organisation.OrganisationId})">
    
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            @(Html.AntiForgeryToken())

            @(Html.Hidden(nameof(AdminChangeOrganisationStatusViewModel.Action),
                ChangeOrganisationStatusViewModelActions.OfferNewStatusAndReason))

            <table class="govuk-table">
                <tbody class="govuk-table__body">
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">Organisation name</th>
                        <td class="govuk-table__cell">@(Model.Organisation.OrganisationName)</td>
                    </tr>
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">Current status</th>
                        <td class="govuk-table__cell">@(Model.Organisation.Status)</td>
                    </tr>
                </tbody>
            </table>

            <div class="govuk-form-group">
                @{
                    string error = ModelErrorHelper.GetErrorMessage(ViewData.ModelState, nameof(Model.NewStatus));
                    ErrorMessageViewModel radiosErrorMessageViewModel = error != null ? new ErrorMessageViewModel {Text = error} : null;
                }
                @await Html.GovUkRadios(new RadiosViewModel
                {
                    Name = nameof(AdminChangeOrganisationStatusViewModel.NewStatus),
                    Fieldset = new FieldsetViewModel
                    {
                        Legend = new LegendViewModel
                        {
                            Text = "Please select a new status",
                            Classes = "govuk-fieldset__legend--m"
                        },
                        Classes = "govuk-!-margin-top-6"
                    },
                    Items = items,
                    ErrorMessage = radiosErrorMessageViewModel
                })
            </div>

        </div>
    </div>

    @if (Model.Organisation.Status == OrganisationStatuses.New ||
         Model.Organisation.Status == OrganisationStatuses.Pending ||
         Model.Organisation.Status == OrganisationStatuses.Active)
    {
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-full">
                
                <h2 class="govuk-heading-m">
                    Do you want to change the scope of any reporting years?
                </h2>

                @if (Model.AnyGuessedScopeChanges)
                {
                    <div class="govuk-inset-text govuk-!-margin-top-0 govuk-!-margin-bottom-2">
                        We've pre-selected some scopes you might want to change.
                        <br/>
                        Please check and change as needed.
                    </div>
                }

                <table class="govuk-table zgovuk-!-margin-top-6" style="width: fit-content;">
                    <thead class="govuk-table__head">
                        <tr class="govuk-table__row">
                            <th scope="col" class="govuk-table__header">Reporting year</th>
                            <th scope="col" class="govuk-table__header">Current scope</th>
                            <th scope="col" class="govuk-table__header">Has reported</th>
                            <th scope="col" class="govuk-table__header">Change to<br/>“Out Of Scope”?</th>
                        </tr>
                    </thead>
                    <tbody class="govuk-table__body">
                        @for (int i = 0; i < Model.Years.Count; i++)
                        {
                            AdminChangeOrganisationStatusReportingYearViewModel year = Model.Years[i];

                            @Html.HiddenFor(m => m.Years[i].ReportingYear)

                            <tr class="govuk-table__row">
                                <td class="govuk-table__cell">
                                    @(ReportingYearsHelper.FormatYearAsReportingPeriod(year.ReportingYear))
                                </td>
                                <td class="govuk-table__cell">
                                    @(year.CurrentScope.IsInScopeVariant() ? "✅" : "❌")
                                    @(year.CurrentScope)
                                </td>
                                <td class="govuk-table__cell">
                                    @(year.HasReported ? "✅ Reported" : "❌ Not reported")
                                </td>
                                <td class="govuk-table__cell">
                                    @if (year.CurrentScope != ScopeStatuses.OutOfScope)
                                    {
                                        @await Html.GovUkCheckboxItem(new CheckboxItemViewModel
                                        {
                                            Id = Html.IdFor(m => m.Years[i].MarkAsOutOfScope),
                                            Name = Html.NameFor(m => m.Years[i].MarkAsOutOfScope),
                                            Checked = year.MarkAsOutOfScope,
                                            Value = true.ToString(),

                                            Label = new LabelViewModel
                                            {
                                                Html = @<text>
                                                           <span class="govuk-visually-hidden">
                                                               Mark reporting year
                                                               @(ReportingYearsHelper.FormatYearAsReportingPeriod(year.ReportingYear))
                                                               as Out Of Scope
                                                           </span>
                                                        </text>
                                            }
                                        })
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    }

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            @await Html.GovUkCharacterCountFor(
                m => m.Reason,
                labelOptions: new LabelViewModel
                {
                    Text = "What is the reason for this change?",
                    Classes = "govuk-label--m"
                },
                formGroupOptions: new FormGroupViewModel
                {
                    Classes = "govuk-!-margin-top-6"
                })

            @(await Html.GovUkButton(new ButtonViewModel
            {
                Text = "Continue",
                Classes = "govuk-!-margin-bottom-4"
            }))

            <p class="govuk-body">
                <a href="@Url.Action("ViewOrganisation", "AdminViewOrganisation", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    Cancel and return to organisation page
                </a>
            </p>

        </div>
    </div>

</form>
