@using GenderPayGap.Core
@using GenderPayGap.WebUI.Views.Components.StatusMessages
@using GenderPayGap.WebUI.Views.Components.TaskList
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.WebUI.Models.Report.ReportOverviewViewModel

@{
    string encryptedOrganisationId = Encryption.EncryptQuerystring(Model.Organisation.OrganisationId.ToString());
    string formattedReportingYears = $"{Model.ReportingYear}-{(Model.ReportingYear + 1) % 100}";

    string editOrReportTitle = Model.IsEditingSubmittedReturn
        ? "Edit your gender pay gap"
        : "Report your gender pay gap";

    ViewBag.Title = $"{editOrReportTitle} - reporting year {formattedReportingYears} - {Model.Organisation.OrganisationName} - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Your Organisations",
                Href = Url.Action("ManageOrganisations", "Organisation")
            },
            new CrumbViewModel
            {
                Text = Model.Organisation.OrganisationName,
                Href = Url.Action("ManageOrganisation", "Organisation", new {id = encryptedOrganisationId})
            },
            new CrumbViewModel
            {
                Text = $"{editOrReportTitle} (reporting year {formattedReportingYears})"
            }
        };
    }

    @(Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}


<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        @{ await Html.RenderPartialAsync("../Components/StatusMessages/StatusMessages", new StatusMessagesViewModel()); }

        <h1 class="govuk-heading-xl">
            @(editOrReportTitle)
            <br />
            <span class="govuk-!-font-size-27">
                for @(Model.Organisation.OrganisationName)
            </span>
            <br />
            <span class="govuk-!-font-size-27" style="margin-top: 4px; display: block;">
                for reporting year @(formattedReportingYears)
            </span>
        </h1>

        @if (Model.IsEditingSubmittedReturn)
        {
            @if (Model.DraftReturnExists)
            {
                <h2 class="govuk-heading-m govuk-!-margin-bottom-2">
                    You have un-published changes
                </h2>
                <p class="govuk-body govuk-!-margin-bottom-2">
                    <a href="@(Url.Action("ReportReview", "ReportReviewAndSubmit",
                                 new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}))"
                       class="govuk-link">
                        Review and submit your report</a>
                    to publish these changes
                </p>
                <p class="govuk-body govuk-!-margin-bottom-8">
                    Or
                    <a href="@(Url.Action("ReportDiscardDraftGet", "ReportDiscardDraft",
                                 new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}))"
                       class="govuk-link">
                        discard your changes</a>
                    if you no longer want to keep them
                </p>
            }
            else
            {
                <h2 class="govuk-heading-m govuk-!-margin-bottom-2">
                    You have reported your gender pay gap data
                </h2>
                <p class="govuk-body govuk-!-margin-bottom-2">
                    You can use this page to make changes to your report
                </p>
                <p class="govuk-body govuk-!-margin-bottom-2">
                    You currently have no un-published changes
                </p>
                <p class="govuk-body govuk-!-margin-bottom-8">
                    If you make changes to your report, you will be able to review and re-submit your report
                </p>
            }
        }
        else
        {
            var statuses = new List<TaskListStatus>
            {
                Model.HourlyPayStatus,
                Model.BonusPayStatus,
                Model.EmployessByPayQuartileStatus,
                Model.OrganisationSizeStatus
            };
            if (Model.Organisation.SectorType != SectorTypes.Public)
            {
                statuses.Add(Model.PersonResponsibleStatus);
            }
            int numberOfCompleteStatuses = statuses.Count(s => s == TaskListStatus.Completed);

            <h2 class="govuk-heading-m govuk-!-margin-bottom-2">
                Report @(numberOfCompleteStatuses == statuses.Count ? "ready to publish" : "incomplete")
            </h2>
            <p class="govuk-body govuk-!-margin-bottom-2">
                You have completed
                @(numberOfCompleteStatuses)
                of @(statuses.Count) required sections.
            </p>
            @if (numberOfCompleteStatuses < statuses.Count)
            {
                <p class="govuk-body @(Model.DraftReturnExists ? "govuk-!-margin-bottom-2" : "govuk-!-margin-bottom-8")">
                    Once you have completed all required sections, you will be able to review and submit your report
                </p>
            }
            else
            {
                <p class="govuk-body govuk-!-margin-bottom-2">
                    <a href="@(Url.Action("ReportReview", "ReportReviewAndSubmit",
                                 new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}))"
                       class="govuk-link">
                        Review and submit your report</a>
                    to publish these changes
                </p>
            }
            @if (Model.DraftReturnExists)
            {
                <p class="govuk-body govuk-!-margin-bottom-8">
                    You can
                    <a href="@(Url.Action("ReportDiscardDraftGet", "ReportDiscardDraft",
                                 new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}))"
                       class="govuk-link">
                        discard your changes</a>
                    if you no longer want to keep them
                </p>
            }
        }

        @{
            var figuresSection = new TaskListSectionViewModel
            {
                SectionName = "Figures",
                Items = new List<TaskListItemViewModel>
                {
                    new TaskListItemViewModel
                    {
                        Title = "Hourly pay",
                        Href = Url.Action("ReportHourlyPayGet", "ReportHourlyPay",
                            new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}),
                        Status = Model.HourlyPayStatus
                    },
                    new TaskListItemViewModel
                    {
                        Title = "Bonus pay",
                        Href = Url.Action("ReportBonusPayGet", "ReportBonusPay",
                            new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}),
                        Status = Model.BonusPayStatus
                    },
                    new TaskListItemViewModel
                    {
                        Title = "Employees by pay quartile",
                        Href = Url.Action("EmployeesByPayQuartileGet", "ReportEmployeesByPayQuartile",
                            new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}),
                        Status = Model.EmployessByPayQuartileStatus
                    }
                }
            };

            var aboutYourOrganisationSection = new TaskListSectionViewModel
            {
                SectionName = "About your organisation",
                Items = new List<TaskListItemViewModel>()
            };
            if (Model.Organisation.SectorType != SectorTypes.Public)
            {
                aboutYourOrganisationSection.Items.Add(new TaskListItemViewModel
                {
                    Title = "Person responsible in your organisation",
                    Href = Url.Action("ReportResponsiblePersonGet", "ReportResponsiblePerson",
                        new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}),
                    Status = Model.PersonResponsibleStatus
                });
            }
            aboutYourOrganisationSection.Items.Add(new TaskListItemViewModel
            {
                Title = "Size of your organisation",
                Href = Url.Action("ReportSizeOfOrganisationGet", "ReportSizeOfOrganisation",
                    new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}),
                Status = Model.OrganisationSizeStatus
            });
            aboutYourOrganisationSection.Items.Add(new TaskListItemViewModel
            {
                Title = "Link to your gender pay gap information",
                BodyHtml = @<text>
                               (optional)
                            </text>,
                Href = Url.Action("ReportLinkToWebsiteGet", "ReportLinkToWebsite",
                    new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear}),
                Status = Model.LinkStatus
            });

            var submitSection = new TaskListSectionViewModel
            {
                SectionName = "Submit report",
                Items = new List<TaskListItemViewModel>
                {
                    new TaskListItemViewModel
                    {
                        Title = "Review and submit your gender pay gap report",
                        Href = Model.ReviewAndSubmitStatus == TaskListStatus.NotStarted // Only show a link if the status is NotStarted
                            ? Url.Action("ReportReview", "ReportReviewAndSubmit",
                                new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear})
                            : null,
                        Status = Model.ReviewAndSubmitStatus
                    }
                }
            };

            await Html.RenderPartialAsync("../Components/TaskList/TaskList", new TaskListViewModel
            {
                ShouldSectionsBeNumbered = false,
                Sections = new List<TaskListSectionViewModel>
                {
                    figuresSection,
                    aboutYourOrganisationSection,
                    submitSection,
                }
            });
        }

    </div>
</div>
