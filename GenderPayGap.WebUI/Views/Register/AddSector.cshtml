@{
    ViewBag.Title = "Add your organisation's sectors - Gender pay gap reporting service";
    var controller = ViewData["Controller"] as RegisterController;
}

@using GenderPayGap.Core
@using GenderPayGap.Database
@model GenderPayGap.WebUI.Models.Register.OrganisationViewModel

<div class="grid-row">
    <div class="column-two-thirds">
        <a href="@Url.Action("AddContact")" class="link-back">Back</a>
    </div>
</div>

<div class="grid-row">
    <div class="column-two-thirds">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Address1)
            @Html.HiddenFor(model => model.Address2)
            @Html.HiddenFor(model => model.Address3)
            @Html.HiddenFor(model => model.AddressReturnAction)
            @Html.HiddenFor(model => model.AddressSource)
            @Html.HiddenFor(model => model.BackAction)
            @Html.HiddenFor(model => model.CharityNumber)
            @Html.HiddenFor(model => model.City)
            @Html.HiddenFor(model => model.CompanyNumber)
            @Html.HiddenFor(model => model.ConfirmReturnAction)
            @Html.HiddenFor(model => model.ContactEmailAddress)
            @Html.HiddenFor(model => model.ContactFirstName)
            @Html.HiddenFor(model => model.ContactJobTitle)
            @Html.HiddenFor(model => model.ContactLastName)
            @Html.HiddenFor(model => model.ContactPhoneNumber)
            @Html.HiddenFor(model => model.Country)
            @Html.HiddenFor(model => model.County)
            @Html.HiddenFor(model => model.ManualAddress)
            @Html.HiddenFor(model => model.ManualEmployerIndex)
            @Html.HiddenFor(model => model.MatchedReferenceCount)
            @Html.HiddenFor(model => model.MutualNumber)
            @Html.HiddenFor(model => model.NameSource)
            @Html.HiddenFor(model => model.NoReference)
            @Html.HiddenFor(model => model.OrganisationName)
            @Html.HiddenFor(model => model.OtherName)
            @Html.HiddenFor(model => model.OtherValue)
            @Html.HiddenFor(model => model.PoBox)
            @Html.HiddenFor(model => model.Postcode)
            @Html.HiddenFor(model => model.SearchText)
            @Html.HiddenFor(model => model.SectorType)
            @Html.HiddenFor(model => model.SelectedEmployerIndex)
            @Html.HiddenFor(model => model.SicSource)

            @Html.HiddenFor(model => model.ManualRegistration)
            @Html.HiddenFor(model => model.ManualAuthorised)
            @Html.HiddenFor(model => model.SelectedAuthorised)

            <div class="grid-row">
                <div class="column-two-thirds">
                    @await Html.CustomValidationSummaryAsync()

                    <h1 class="heading-large">
                        Sector of the organisation you're reporting for
                    </h1>

                    <div class="dynamic-content default-content">
                        @if (Model.SectorType == OrganisationSectors.Private)
                        {
                            <p>Please enter one or more Standard Industrial Classification (SIC) codes. These will determine the business sector under which your organisation will be reported.</p>
                        }
                        else
                        {
                            <p>Your organisation will reported as "<b>Public&nbsp;sector</b>". You can also be reported under other business sectors by entering one or more Standard Industrial Classification (SIC) codes below.</p>
                        }
                        <p>@Html.ValueFor(model => model.OrganisationName)</p>
                        <div class="form-group @Html.SetErrorClass(model => model.SicCodeIds, " error")">
                            @Html.LabelFor(model => model.SicCodeIds, "SIC Codes", new {@class = "form-label col-md-2"})
                            @if (Model.SectorType != OrganisationSectors.Private)
                            {
                                <span class="optional">(Optional)</span>
                            }
                            @Html.ValidationMessageFor(model => model.SicCodeIds, "", new {@class = "error-danger"})
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.SicCodeIds, new {@class = "form-control", style = "height:100px;width:100%;resize: none;"})
                                <span style="font-size:small;">Enter SIC codes separated by commas, semicolons or new lines.</span>
                            </div>
                        </div>

                        <p>
                            <input class="button" type="submit" role="button" name="command" value="Continue" aria-label="Continue"/>
                        </p>

                        <details role="group">
                            <summary role="button" aria-controls="details-content-0" aria-expanded="true">View SIC codes</summary>
                            <div class="panel panel-border-narrow" id="details-content-0" aria-hidden="false">
                                <div style="overflow:auto;height:200px;border:inset;">
                                    @await Html.PartialAsync("_SicCodeList", controller.DataRepository
                                        .GetAll<SicCode>()
                                        .Select(x => x.SicCodeId)
                                        .ToList())
                                </div>
                            </div>
                        </details>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            "use strict";
            GOVUK.details.addDetailsPolyfill();
        }());
    </script>
}