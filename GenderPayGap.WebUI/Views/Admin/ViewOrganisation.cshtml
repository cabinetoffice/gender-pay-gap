@using Microsoft.AspNetCore.Http
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using GenderPayGap.Core
@using GenderPayGap.Core.Helpers
@using GenderPayGap.Database
@using GenderPayGap.WebUI.Helpers
@model GenderPayGap.WebUI.Models.Admin.AdminViewOrganisationViewModel

@{
    ViewBag.Title = $"Organisation Details - {Model.Organisation.OrganisationName} - Administration - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>();
        crumbs.Add(new CrumbViewModel
        {
            Text = "Admin",
            Href = Url.Action("AdminHomePage", "AdminHomepage")
        });

        Uri referrer = Context.Request.GetTypedHeaders().Referer;
        string searchPageUrl = Url.Action("SearchGet", "AdminSearch", null, "https");

        if (referrer != null && referrer.AbsoluteUri.StartsWith(searchPageUrl))
        {
            crumbs.Add(new CrumbViewModel
            {
                Text = "Search results",
                Href = "javascript:window.history.back();"
            });
        }

        crumbs.Add(new CrumbViewModel
        {
            Text = Model.Organisation.OrganisationName
        });
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<span class="govuk-caption-xl">Administration</span>
<h1 class="govuk-heading-xl">
    Organisation details
    <br/>
    <span class="govuk-!-font-size-27">
        for @(Model.Organisation.OrganisationName)
    </span>
</h1>

<p class="govuk-body">
    <a href="@Url.Action("Employer", "ViewReports", new {organisationId = Model.Organisation.OrganisationId})"
       class="govuk-link">
        '@(Model.Organisation.OrganisationName)' on viewing service
    </a>
</p>

<h2 class="govuk-heading-l">General information</h2>
<table class="govuk-table">
    <tbody class="govuk-table__body">
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Name</th>
            <td class="govuk-table__cell">
                @(Model.Organisation.OrganisationName)
            </td>
            <td class="govuk-table__cell">
                <a href="@Url.Action("ViewNameHistory", "AdminOrganisationName", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    History <span class="govuk-visually-hidden"> of names</span>
                    @if (User.IsInRole(LoginRoles.GpgAdmin)) {
                        <span>/ change<span class="govuk-visually-hidden"> name</span></span>
                    }
                </a>
            </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Address</th>
            <td class="govuk-table__cell">
                @(Model.Organisation.OrganisationAddresses.OrderByDescending(a => a.Created).FirstOrDefault()?.GetAddressString() ?? "(No 'latest address')")
            </td>
            <td class="govuk-table__cell">
                <a href="@(Url.Action("ViewAddressHistory", "AdminOrganisationAddress", new {id = Model.Organisation.OrganisationId}))"
                   class="govuk-link">
                    History <span class="govuk-visually-hidden"> of addresses</span>
                    @if (User.IsInRole(LoginRoles.GpgAdmin)) {
                        <span>/ change<span class="govuk-visually-hidden"> address</span></span>
                    }
                </a>
            </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Organisation ID</th>
            <td class="govuk-table__cell" colspan="2">@(Model.Organisation.OrganisationId)</td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Company Number</th>
            <td class="govuk-table__cell">@(Model.Organisation.CompanyNumber)</td>
            <td class="govuk-table__cell">
                @if (User.IsInRole(LoginRoles.GpgAdmin))
                {
                    <a href="@Url.Action("ChangeCompanyNumberGet", "AdminOrganisationCompanyNumber", new {id = Model.Organisation.OrganisationId})"
                       class="govuk-link">
                        @(string.IsNullOrWhiteSpace(Model.Organisation.CompanyNumber) ? "Add" : "Change")
                        <span class="govuk-visually-hidden"> company number</span>
                    </a>
                }
            </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">
                Synchronise data<br/>
                <span class="govuk-!-font-weight-regular">with Companies House</span>
            </th>
            @if (!string.IsNullOrWhiteSpace(Model.Organisation.CompanyNumber))
            {
                <td class="govuk-table__cell">
                    @(Model.Organisation.OptedOutFromCompaniesHouseUpdate ? "Opted out" : "Opted in")
                </td>
                <td class="govuk-table__cell">
                    @if (User.IsInRole(LoginRoles.GpgAdmin))
                    {
                        @if (Model.Organisation.OptedOutFromCompaniesHouseUpdate)
                        {
                            <a href="@Url.Action("OptIn", "AdminOrganisationCompaniesHouseOptInOut", new {id = Model.Organisation.OrganisationId})"
                               class="govuk-link">
                                Change <span class="govuk-visually-hidden"> Companies House sync to opted in</span>
                            </a>
                        }
                        else
                        {
                            <a href="@Url.Action("OptOut", "AdminOrganisationCompaniesHouseOptInOut", new {id = Model.Organisation.OrganisationId})"
                               class="govuk-link">
                                Change <span class="govuk-visually-hidden"> Companies House sync to opted out</span>
                            </a>
                        }
                    }
                </td>
            }
            else
            {
                <td class="govuk-table__cell" colspan="2">
                    Not applicable
                    <br/>
                    <span class="govuk-body-s">
                        (organisation needs a company number to be eligible to synchronise with Companies House)
                    </span>
                </td>
            }
        </tr>

        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Status</th>
            <td class="govuk-table__cell">@(Model.Organisation.Status)</td>
            <td class="govuk-table__cell">
                <a href="@Url.Action("ViewStatusHistory", "AdminOrganisationStatus", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    History <span class="govuk-visually-hidden"> of statuses</span>
                    @if (User.IsInRole(LoginRoles.GpgAdmin)) {
                        <span>/ change<span class="govuk-visually-hidden"> status</span></span>
                    }
                </a>
            </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Sector</th>
            <td class="govuk-table__cell">
                @(Model.Organisation.SectorType)
            </td>
            <td class="govuk-table__cell">
                <a href="@Url.Action("ViewSectorHistory", "AdminOrganisationSector", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    History <span class="govuk-visually-hidden"> of sectors</span>
                    @if (User.IsInRole(LoginRoles.GpgAdmin)) {
                        <span>/ change<span class="govuk-visually-hidden"> sector</span></span>
                    }
                </a>
            </td>
        </tr>
        @if (Model.Organisation.SectorType == SectorTypes.Public)
        {
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Public sector classification</th>
                <td class="govuk-table__cell">
                    @(Model.Organisation.LatestPublicSectorType?.PublicSectorType?.Description ?? "(none)")
                </td>
                <td class="govuk-table__cell">
                    @if (User.IsInRole(LoginRoles.GpgAdmin))
                    {
                        <a href="@Url.Action("ChangePublicSectorClassificationGet", "AdminOrganisationSector", new {id = Model.Organisation.OrganisationId})"
                           class="govuk-link">
                            Change <span class="govuk-visually-hidden">public sector classification</span>
                        </a>
                    }
                </td>
            </tr>
        }
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">SIC codes</th>
            <td class="govuk-table__cell">
                @foreach (OrganisationSicCode organisationSicCode in Model.Organisation.OrganisationSicCodes.Where(osc => !osc.IsRetired()))
                {
                    <b>@(organisationSicCode.SicCode.SicCodeId)</b>
                    @(organisationSicCode.SicCode.Description)
                    <br/>
                    <span class="govuk-body-s">
                        part of: @(organisationSicCode.SicCode.SicSection.Description)
                    </span>
                    <br/>
                }
            </td>
            <td class="govuk-table__cell">
                <a href="@Url.Action("ViewSicCodesHistory", "AdminOrganisationSicCodes", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    History <span class="govuk-visually-hidden"> of SIC codes</span>
                    @if (User.IsInRole(LoginRoles.GpgAdmin)) {
                        <span>/ change<span class="govuk-visually-hidden"> SIC codes</span></span>
                    }
                </a>
            </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Scope</th>
            <td class="govuk-table__cell">
                @foreach (int year in Model.ReportingYears)
                {
                    <b>
                        @(ReportingYearsHelper.FormatYearAsReportingPeriod(year)):
                    </b>
                    
                    List<OrganisationScope> scopes = Model.Organisation.GetActiveScopesForYear(year).ToList();
                    @if (scopes.Count == 0)
                    {
                        <a href="@Url.Action("OrganisationsWithNoActiveScopeForEveryYear", "AdminDatabaseIntegrityChecks")"
                           class="govuk-link">
                            No scope for this reporting year (this is an error)
                        </a>
                    }
                    else if (scopes.Count > 1)
                    {
                        <a href="@Url.Action("OrganisationsWithMultipleActiveScopesForASingleYear", "AdminDatabaseIntegrityChecks")"
                           class="govuk-link">
                            Too many active scopes for this reporting year (this is an error)
                        </a>
                    }
                    else
                    {
                        @(scopes[0].ScopeStatus)
                    }
                    <br/>
                }
            </td>
            <td class="govuk-table__cell">
                <a href="@Url.Action("ViewScopeHistory", "AdminOrganisationScope", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    History <span class="govuk-visually-hidden"> of scopes</span>
                    @if (User.IsInRole(LoginRoles.GpgAdmin)) {
                        <span>/ change<span class="govuk-visually-hidden"> scopes</span></span>
                    }
                </a>
            </td>
        </tr>
        <tr class="govuk-table__row">
            <th scope="row" class="govuk-table__header">Returns</th>
            <td class="govuk-table__cell">
                @foreach (int year in Model.ReportingYears)
                {
                    Return latestReturnForCurrentYear = Model.Organisation.Returns
                        .Where(r => r.AccountingDate.Year == year)
                        .OrderByDescending(r => r.Modified)
                        .FirstOrDefault();

                    <b>
                        @(ReportingYearsHelper.FormatYearAsReportingPeriod(year)):
                    </b>
                    @if (latestReturnForCurrentYear != null)
                    {
                        @(latestReturnForCurrentYear.Status)
                        @(latestReturnForCurrentYear.IsLateSubmission ? " (submitted late)" : null)
                    }
                    else
                    {
                        <span>No return for this reporting year</span>
                    }
                    <br/>
                }
            </td>
            <td class="govuk-table__cell">
                <a href="@Url.Action("ViewReturns", "AdminOrganisationReturn", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    Details <span class="govuk-visually-hidden"> of returns</span>
                </a>
            </td>
        </tr>
        @if (User.IsInRole(LoginRoles.GpgAdmin))
        {
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header" colspan="2">Audit logs</th>
                <td class="govuk-table__cell">
                    <a href="@Url.Action("ViewOrganisationAuditLogs", "AdminViewAuditLogs", new {id = Model.Organisation.OrganisationId})"
                       class="govuk-link">
                        View audit logs
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<h2 class="govuk-heading-l">Registered users</h2>
@if (!Model.Organisation.UserOrganisations.Any())
{
    <div class="govuk-body">
        No registered users
    </div>
}
else
{
    <table class="govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">User</th>
                <th scope="col" class="govuk-table__header">Status</th>
                @if (User.IsInRole(LoginRoles.GpgAdmin))
                {
                    <th scope="col" class="govuk-table__header">Actions</th>
                }
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            @foreach (UserOrganisation userOrganisation in Model.Organisation.UserOrganisations)
            {
                User user = userOrganisation.User;
                string userStatus = null;
                @if (userOrganisation.IsAwaitingActivationPIN())
                {
                    userStatus = "AWAITING_PIN";
                }
                else if (userOrganisation.IsAwaitingRegistrationApproval())
                {
                    userStatus = "AWAITING_APPROVAL";
                }
                else
                {
                    userStatus = "REGISTERED";
                }

                <tr class="govuk-table__row">
                    <td class="govuk-table__cell">
                        <a href="@Url.Action("ViewUser", "AdminViewUser", new {id = user.UserId})"
                           class="govuk-link">
                            @(user.Fullname)
                        </a>
                        <br/>
                        @(user.EmailAddress)
                    </td>
                    <td class="govuk-table__cell">
                        @if (userStatus == "AWAITING_PIN")
                        {
                            <span>
                                Awaiting activation PIN
                                <br/>
                                <span class="govuk-!-font-weight-bold">
                                    @(userOrganisation.PIN)
                                </span>
                                <br/>
                                <span class="govuk-body-s">
                                    sent on
                                    <span style="white-space: nowrap">
                                        @(userOrganisation.PINSentDate.Value.ToString("d MMM yyyy"))
                                    </span>
                                    <br/>
                                    expires on
                                    <span style="white-space: nowrap">
                                        @(userOrganisation.PINSentDate.Value.AddDays(Global.PinInPostExpiryDays).ToString("d MMM yyyy"))
                                    </span>
                                    @if (userOrganisation.PINSentDate.Value.AddDays(Global.PinInPostExpiryDays) < VirtualDateTime.Now)
                                    {
                                        <br/>
                                        <span class="govuk-!-font-weight-bold">
                                            EXPIRED
                                        </span>
                                    }
                                    else if (userOrganisation.PINSentDate.Value.AddDays(Global.PinInPostExpiryDays) < VirtualDateTime.Now.AddDays(7))
                                    {
                                        <br/>
                                        <span class="govuk-!-font-weight-bold">
                                            EXPIRES IN LESS THAN ONE WEEK
                                        </span>
                                    }
                                </span>
                            </span>
                        }
                        else if (userStatus == "AWAITING_APPROVAL")
                        {
                            @:Awaiting registration approval
                        }
                        else
                        {
                            <span>
                                Registration complete
                                <br/>
                                (confirmed on
                                <span style="white-space: nowrap">
                                    @(userOrganisation.PINConfirmedDate.Value.ToString("d MMM yyyy")))
                                </span>
                            </span>
                        }
                    </td>
                    @if (User.IsInRole(LoginRoles.GpgAdmin))
                    {
                        <td class="govuk-table__cell">
                            @if (userStatus == "REGISTERED")
                            {
                                <form method="POST"
                                      action="@Url.Action("ImpersonateDirectPost", "AdminImpersonateUser", new {userId = user.UserId})"
                                      style="display: inline"
                                      gpg-module="impersonate-form">
                                    @Html.AntiForgeryToken()
                                    @(await Html.GovUkButton(new ButtonViewModel
                                    {
                                        Html = @<text>
                                                   Impersonate user <span class="govuk-visually-hidden">@(user.Fullname)</span>
                                                </text>,
                                        Classes = "govuk-button--secondary govuk-!-margin-bottom-0",
                                        PreventDoubleClick = true
                                    }))
                                    <a href="#"
                                       class="govuk-link"
                                       style="display: none">
                                        Impersonate user <span class="govuk-visually-hidden">@(user.Fullname)</span>
                                    </a>
                                </form>
                            }
                            else if (userStatus == "AWAITING_PIN")
                            {
                                <a href="@(Url.Action("SendPinWarning", "AdminUnconfirmedPins", new {userId = user.UserId, organisationId = userOrganisation.Organisation.OrganisationId}))"
                                   class="govuk-link">
                                    Send PIN <span class="govuk-visually-hidden"> to @(user.Fullname) at @(userOrganisation.Organisation.OrganisationName)</span>
                                </a>
                            }
                            else
                            {
                                <a href="@Url.Action("PendingRegistrationGet", "AdminPendingRegistrations", new {userId = userOrganisation.UserId, organisationId = userOrganisation.OrganisationId})"
                                   class="govuk-link">
                                    Review user request <span class="govuk-visually-hidden"> for @(user.Fullname)</span>
                                </a>
                            }
                            <br/>
                            <br/>
                            <a href="@Url.Action("RemoveUserFromOrganisationGet", "AdminRemoveUserFromOrganisation", new {organisationId = userOrganisation.Organisation.OrganisationId, userId = user.UserId})"
                               class="govuk-link">
                                Remove user <span class="govuk-visually-hidden">@(user.Fullname)</span> from organisation <span class="govuk-visually-hidden">@(userOrganisation.Organisation.OrganisationName)</span>
                            </a>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

<script>
    (function() {

        var impersonateForms = document.querySelectorAll("form[gpg-module='impersonate-form']");

        impersonateForms.forEach(function(impersonateForm) {
            var impersonateButton = impersonateForm.querySelector("button");
            impersonateButton.remove();

            var impersonateLink = impersonateForm.querySelector("a");
            impersonateLink.addEventListener('click', function (event) {
                event.preventDefault();
                impersonateForm.submit();
            });
            impersonateLink.removeAttribute("style");
        });

    })();
</script>
