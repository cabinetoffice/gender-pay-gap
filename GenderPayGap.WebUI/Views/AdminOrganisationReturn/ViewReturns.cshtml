@using GenderPayGap.Database
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.Database.Organisation

@{
    ViewBag.Title = $"Returns - {Model.OrganisationName} - Administration - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>();
        crumbs.Add(new CrumbViewModel
        {
            Text = "Admin",
            Href = Url.Action("Home", "Admin")
        });

        crumbs.Add(new CrumbViewModel
        {
            Text = Model.OrganisationName,
            Href = Url.Action("ViewOrganisation", "AdminViewOrganisation", new { id = Model.OrganisationId })
        });

        crumbs.Add(new CrumbViewModel
        {
            Text = "Returns"
        });
    }

    @(Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">

        <span class="govuk-caption-xl">Administration</span>
        <h1 class="govuk-heading-xl">
            Returns
            <br />
            <span class="govuk-!-font-size-27">
                for @(Model.OrganisationName)
            </span>
        </h1>
        
        <p class="govuk-body govuk-!-margin-bottom-6">
            <a href="@Url.Action("DownloadReturnDetailsCsv", "AdminOrganisationReturn", new { id = Model.OrganisationId })"
               class="govuk-link">
                Download CSV of return details <span class="govuk-visually-hidden">for @(Model.OrganisationName)</span>
            </a>
        </p>

        <table class="govuk-table">
            <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    <th scope="col" class="govuk-table__header">Snapshot date</th>
                    <th scope="col" class="govuk-table__header">Full details</th>
                    <th scope="col" class="govuk-table__header">Modified</th>
                    <th scope="col" class="govuk-table__header">Employees</th>
                    <th scope="col" class="govuk-table__header">Modifications</th>
                    <th scope="col" class="govuk-table__header">Status</th>
                    <th scope="col" class="govuk-table__header">Late</th>
                    <th scope="col" class="govuk-table__header">Late reason</th>
                    <th scope="col" class="govuk-table__header">Public page</th>
                </tr>
            </thead>
            <tbody class="govuk-table__body">
                @{ var previousAccountingDate = DateTime.MinValue; }
                @foreach (Return returnForYear in Model.Returns.OrderByDescending(r => r.AccountingDate).ThenByDescending(r => r.StatusDate))
                {
                <tr class="govuk-table__row">
                    @if (returnForYear.AccountingDate == previousAccountingDate)
                    {
                        @* Omit this TD, a TD above has a rowspan that covers this row *@
                    }
                    else
                    {
                        <th scope="row" class="govuk-table__cell" style="white-space: nowrap" rowspan="@(Model.Returns.Count(s => s.AccountingDate == returnForYear.AccountingDate))">
                            @(returnForYear.AccountingDate.ToString("d MMM yyyy"))
                        </th>
                        <td class="govuk-table__cell" rowspan="@(Model.Returns.Count(s => s.AccountingDate == returnForYear.AccountingDate))">
                            <a href="@Url.Action("ViewReturnDetailsForYear", "AdminOrganisationReturn",
                                         new { id = Model.OrganisationId, year = returnForYear.AccountingDate.Year })"
                               class="govuk-link">
                                <span class="govuk-visually-hidden">Full history of returns for @(Model.OrganisationName) for</span>
                                <span style="white-space: nowrap;">
                                    @(returnForYear.AccountingDate.Year)-@((returnForYear.AccountingDate.Year + 1) % 100)
                                </span>
                            </a>
                        </td>
                    }
                    <td class="govuk-table__cell">
                        <span style="white-space: nowrap">
                            @(returnForYear.Modified.ToString("d MMM yyyy"))
                        </span>
                        <span style="white-space: nowrap">
                            @(returnForYear.Modified.ToString("HH:mm"))
                        </span>
                    </td>
                    <td class="govuk-table__cell">@(returnForYear.MinEmployees)-@(returnForYear.MaxEmployees)</td>
                    <td class="govuk-table__cell">
                        @(returnForYear.Modifications != null
                            ? string.Join(", ", returnForYear.Modifications.Split(",", StringSplitOptions.RemoveEmptyEntries))
                            : "")
                    </td>
                    <td class="govuk-table__cell">@(returnForYear.Status)</td>
                    <td class="govuk-table__cell">
                        @if (returnForYear.AccountingDate != previousAccountingDate)
                        {
                            <span>@(returnForYear.IsLateSubmission ? "Yes" : "No") - </span>
                            <a href="@Url.Action("ChangeLateFlag", "AdminReturnLateFlag", new {id = returnForYear.ReturnId})" class="govuk-link">
                                Change <span class="govuk-visually-hidden"> late submission status for @(returnForYear.GetReportingPeriod())</span>
                            </a>
                        }
                    </td>
                    <td class="govuk-table__cell">@(returnForYear.LateReason)</td>
                    @if (returnForYear.AccountingDate == previousAccountingDate)
                    {
                        @* Omit this TD, a TD above has a rowspan that covers this row *@
                    }
                    else
                    {
                        <td class="govuk-table__cell" rowspan="@(Model.Returns.Count(s => s.AccountingDate == returnForYear.AccountingDate))">
                            <a href="@Url.Action("Report", "Viewing", new {employerIdentifier = Model.GetEncryptedId(), year = returnForYear.AccountingDate.Year})"
                               class="govuk-link">
                                <span class="govuk-visually-hidden">Public page for return year </span>@(returnForYear.AccountingDate.Year)
                            </a>
                        </td>
                    }
                </tr>
                    previousAccountingDate = returnForYear.AccountingDate;
                }
            </tbody>
        </table>


    </div>
</div>
