@using GenderPayGap.Core
@using GenderPayGap.Core.Helpers
@using GenderPayGap.Database
@using GenderPayGap.WebUI.Helpers
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.Database.Organisation

@{
    ViewBag.Title = $"Returns - {Model.OrganisationName} - Administration - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>();
        crumbs.Add(new CrumbViewModel
        {
            Text = "Admin",
            Href = Url.Action("AdminHomePage", "AdminHomepage")
        });

        crumbs.Add(new CrumbViewModel
        {
            Text = Model.OrganisationName,
            Href = Url.Action("ViewOrganisation", "AdminViewOrganisation", new {id = Model.OrganisationId})
        });

        crumbs.Add(new CrumbViewModel
        {
            Text = "Returns"
        });
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">

        <span class="govuk-caption-xl">Administration</span>
        <h1 class="govuk-heading-xl">
            Returns
            <br/>
            <span class="govuk-!-font-size-27">
                for @(Model.OrganisationName)
            </span>
        </h1>

        <p class="govuk-body govuk-!-margin-bottom-6">
            <a href="@Url.Action("DownloadReturnDetailsCsv", "AdminOrganisationReturn", new {id = Model.OrganisationId})"
               class="govuk-link">
                Download CSV of return details <span class="govuk-visually-hidden">for @(Model.OrganisationName)</span>
            </a>
        </p>
        
        <div class="govuk-inset-text">
            Any submission change before 18th March 2020 will not be visible on this page.
            If you need to see these you should talk to the digital team to find the relevant logs
        </div>

        @if (!Model.Returns.Any())
        {
            <div class="govuk-body">
                No returns
            </div>
        }
        else
        {
            <table class="govuk-table">
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header">Reporting year</th>
                        <th scope="col" class="govuk-table__header">
                            <span class="govuk-visually-hidden">Actions that apply to all Returns for this reporting year</span>
                        </th>
                        <th scope="col" class="govuk-table__header">Modified</th>
                        <th scope="col" class="govuk-table__header">Modifications</th>
                        <th scope="col" class="govuk-table__header">Status</th>
                        <th scope="col" class="govuk-table__header">Late</th>
                        <th scope="col" class="govuk-table__header">Late reason</th>
                        <th scope="col" class="govuk-table__header">Action <span class="govuk-visually-hidden">that apply to individual versions of a Return</span></th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body">
                    @{ var previousAccountingDate = DateTime.MinValue; }
                    @foreach (Return returnForYear in Model.Returns.OrderByDescending(r => r.AccountingDate).ThenByDescending(r => r.Modified))
                    {
                        <tr class="govuk-table__row">
                            @if (returnForYear.AccountingDate == previousAccountingDate)
                            {
                                @* Omit this TD, a TD above has a rowspan that covers this row *@
                            }
                            else
                            {
                                int versionsForThisReportingYear = Model.Returns.Count(s => s.AccountingDate == returnForYear.AccountingDate);
                                var reportingYear = ReportingYearsHelper.FormatYearAsReportingPeriod(returnForYear.AccountingDate.Year);

                                <th scope="row" class="govuk-table__cell" style="white-space: nowrap" rowspan="@(versionsForThisReportingYear)">
                                    @reportingYear
                                </th>
                                <td class="govuk-table__cell" rowspan="@(versionsForThisReportingYear)">
                                    <span style="line-height: 1.7;">
                                        <a href="@Url.Action("ViewReturnDetailsForYear", "AdminOrganisationReturn",
                                                     new {id = Model.OrganisationId, year = returnForYear.AccountingDate.Year})"
                                           class="govuk-link" style="font-weight: normal">
                                            <span style="white-space: nowrap">Full history</span>
                                            <span class="govuk-visually-hidden">of returns for reporting year @reportingYear</span>
                                        </a>
                                        <br/>
                                        <a href="@Url.Action("Report", "Viewing", new {employerIdentifier = Model.GetEncryptedId(), year = returnForYear.AccountingDate.Year})"
                                           class="govuk-link" style="font-weight: normal">
                                            <span style="white-space: nowrap">Public page</span>
                                            <span class="govuk-visually-hidden">for reporting year @reportingYear</span>
                                        </a>
                                        @if (Model.Returns.Any(r => r.Status != ReturnStatuses.Deleted))
                                        {
                                            @if (User.IsInRole(LoginRoles.GpgAdmin))
                                            {
                                                <br/>
                                                <a href="@Url.Action("DeleteReturnsOfAYearGet", "AdminOrganisationReturn", new {id = Model.OrganisationId, year = returnForYear.AccountingDate.Year})"
                                                   class="govuk-link" style="font-weight: normal">
                                                    <span style="white-space: nowrap">Delete returns</span>
                                                    <span class="govuk-visually-hidden">for reporting year @reportingYear</span>
                                                </a>
                                            }
                                        }
                                    </span>
                                </td>
                            }
                            <td class="govuk-table__cell">
                                <span style="white-space: nowrap">
                                    @(returnForYear.Modified.ToString("d MMM yyyy"))
                                </span>
                                <span style="white-space: nowrap">
                                    @(returnForYear.Modified.ToString("HH:mm"))
                                </span>
                            </td>
                            <td class="govuk-table__cell">
                                @(returnForYear.Modifications != null
                                    ? string.Join(", ", returnForYear.Modifications.Split(",", StringSplitOptions.RemoveEmptyEntries))
                                    : "")
                            </td>
                            <td class="govuk-table__cell">@(returnForYear.Status)</td>
                            <td class="govuk-table__cell">
                                @if (returnForYear.AccountingDate != previousAccountingDate)
                                {
                                    <span>@(returnForYear.IsLateSubmission ? "Yes" : "No")</span>
                                    @if (User.IsInRole(LoginRoles.GpgAdmin))
                                    {
                                        <br/>
                                        <a href="@Url.Action("ChangeLateFlag", "AdminReturnLateFlag", new {id = returnForYear.ReturnId})" class="govuk-link">
                                            Change <span class="govuk-visually-hidden"> late submission status for @(returnForYear.GetReportingPeriod())</span>
                                        </a>
                                    }
                                }
                            </td>
                            <td class="govuk-table__cell">@(returnForYear.LateReason)</td>
                            <td class="govuk-table__cell">
                                @if (returnForYear.Status != ReturnStatuses.Deleted)
                                {
                                    @if (User.IsInRole(LoginRoles.GpgAdmin))
                                    {
                                        <a href="@Url.Action("DeleteReturnGet", "AdminOrganisationReturn", new {id = Model.OrganisationId, year = returnForYear.AccountingDate.Year, returnId = returnForYear.ReturnId})"
                                           class="govuk-link">
                                            Delete
                                            <span class="govuk-visually-hidden"> the return for @(returnForYear.GetReportingPeriod()) modified on @(returnForYear.Modified.ToString("d MMM yyyy HH:mm"))</span>
                                        </a>
                                    }
                                }
                            </td>
                        </tr>
                        previousAccountingDate = returnForYear.AccountingDate;
                    }
                </tbody>
            </table>
        }
    </div>
</div>
