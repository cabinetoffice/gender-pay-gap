@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.WebUI.Models.AddOrganisation.AddOrganisationManualViewModel
@{
    ViewBag.Title = "What is the name of the organisation? - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        string backLinkHref;
        if (Model.Editing == true)
        {
            Model.Validate = null; // Required to make the "Back" link work correctly
            Model.Editing = null; // To make the url look a bit nicer (the Review page implies we're editing so there's no need for "Editing" in the url)
            backLinkHref = Url.Action("ManualReview", "AddOrganisationManualReview", Model);
        }
        else
        {
            backLinkHref = Url.Action("Search", "AddOrganisationSearch",
                new
                {
                    Sector = Model.Sector.Value.ToString().ToLower() /* to make the URL look nice (lower case)*/,
                    Query = Model.Query
                });
        }
    }
    @(Html.GovUkBackLink(new BackLinkViewModel
    {
        Text = "Back",
        Href = backLinkHref,
        
        // Note: some of the "Back" links in this journey can't use the default browser behaviour
        //  so we should control all of them explicitly
        OverrideWithJavascript = false
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        @(Html.GovUkErrorSummary())

        <form method="get"
              action="@Url.Action("ManualName", "AddOrganisationManualName")">
            @(Html.HiddenFor(m => m.Editing))
            @(Html.HiddenFor(m => m.Sector))
            @(Html.HiddenFor(m => m.Query))
            @(Html.HiddenFor(m => m.PoBox))
            @(Html.HiddenFor(m => m.Address1))
            @(Html.HiddenFor(m => m.Address2))
            @(Html.HiddenFor(m => m.Address3))
            @(Html.HiddenFor(m => m.TownCity))
            @(Html.HiddenFor(m => m.County))
            @(Html.HiddenFor(m => m.Country))
            @(Html.HiddenFor(m => m.PostCode))
            @(Html.HiddenFor(m => m.IsUkAddress))
            @if (Model.SicCodes != null)
            {
                @for (int i = 0; i < Model.SicCodes.Count; i++)
                {
                    <input type="hidden" name="@(nameof(Model.SicCodes))" value="@(Model.SicCodes[i])"/>
                }
            }
            @{
                Model.Validate = true;
                @(Html.HiddenFor(m => m.Validate))
            }

            @(Html.GovUkTextInputFor(
                m => m.OrganisationName,
                labelOptions: new LabelViewModel
                {
                    Text = "What is the name of the organisation?",
                    IsPageHeading = true,
                    Classes = "govuk-label--xl"
                },
                autocomplete: "organization"
            ))

            @(Html.GovUkButton(new ButtonViewModel
            {
                Text = "Continue",
                Classes = "govuk-!-margin-bottom-4"
            }))

            <p class="govuk-body">
                <a href="@Url.Action("ManageOrganisations", "Organisation")"
                   class="govuk-link">
                    Cancel and return to your organisations
                </a>
            </p>

        </form>

    </div>
</div>
