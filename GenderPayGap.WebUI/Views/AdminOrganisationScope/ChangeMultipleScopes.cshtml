@using GenderPayGap.Core
@using GenderPayGap.Core.Helpers
@using GenderPayGap.Database
@using GenderPayGap.WebUI.Models.Admin
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.WebUI.Models.Admin.AdminChangeMultipleScopesViewModel

@{
    ViewBag.Title = "Change scope - Administration - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Admin",
                Href = Url.Action("AdminHomePage", "AdminHomepage")
            },
            new CrumbViewModel
            {
                Text = Model.Organisation.OrganisationName,
                Href = Url.Action("ViewOrganisation", "AdminViewOrganisation", new {id = Model.Organisation.OrganisationId})
            },
            new CrumbViewModel
            {
                Text = "Scope history",
                Href = Url.Action("ViewScopeHistory", "AdminOrganisationScope", new {id = Model.Organisation.OrganisationId})
            },
            new CrumbViewModel
            {
                Text = "Change scope"
            }
        };
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        <span class="govuk-caption-xl">Administration</span>
        <h1 class="govuk-heading-xl">
            Change scope
            <br/>
            <span class="govuk-!-font-size-27">
                for @(Model.Organisation.OrganisationName)
            </span>
        </h1>
        
        @await Html.GovUkErrorSummary(ViewData.ModelState)

        @if (Model.Organisation.Status == OrganisationStatuses.Retired || Model.Organisation.Status == OrganisationStatuses.Retired)
        {
            @if (Model.AnyGuessedScopeChanges)
            {
                OrganisationStatus latestStatus = Model.Organisation.OrganisationStatuses.OrderByDescending(s => s.StatusDate).FirstOrDefault();
                
                <div class="govuk-inset-text govuk-!-margin-top-0">
                    <p class="govuk-body govuk-!-margin-bottom-2">
                        This organisation was <b>@(latestStatus.Status)</b>
                        on @(latestStatus.StatusDate.ToString("d MMM yyyy"))
                        <br/>
                        by
                        <a href="@Url.Action("ViewUser", "AdminViewUser", new {id = latestStatus.ByUserId})"
                           class="govuk-link">
                            @(latestStatus.ByUser.Fullname)
                        </a>
                        with reason:
                        <br/>
                        <small>
                            @(latestStatus.StatusDetails)
                        </small>
                    </p>
                
                    <p class="govuk-body">
                        We've pre-selected some scopes you might want to change.
                        <br/>
                        Please check and change as needed.
                    </p>
                </div>
            }
        }
        else
        {
            <div class="govuk-inset-text govuk-!-margin-top-0">
                <p class="govuk-body govuk-!-margin-bottom-2">
                    This organisation is <b>@Model.Organisation.Status</b>.
                </p>
                <p class="govuk-body">
                    If you want to change the <b>status</b> and <b>scope</b> at the same time,
                    <br/>
                    you can use the
                    <a href="@Url.Action("ChangeStatusGet", "AdminOrganisationStatus", new {id = Model.Organisation.OrganisationId})"
                       class="govuk-link">
                        change status page
                    </a>
                </p>
            </div>
        }

    </div>
</div>

<form method="POST" action="@Url.Action("ChangeMultipleScopesPost", "AdminOrganisationScope", new {id = Model.Organisation.OrganisationId})">
    @(Html.AntiForgeryToken())

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            
            <table class="govuk-table" style="width: fit-content;">
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header">Reporting year</th>
                        <th scope="col" class="govuk-table__header">Current scope</th>
                        <th scope="col" class="govuk-table__header">Has reported</th>
                        <th scope="col" class="govuk-table__header">Change to<br/>“In Scope”?</th>
                        <th scope="col" class="govuk-table__header">Change to<br/>“Out Of Scope”?</th>
                        <th scope="col" class="govuk-table__header">No change</th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body">
                    @for (int i = 0; i < Model.Years.Count; i++)
                    {
                        AdminChangeMultipleScopesReportingYearViewModel year = Model.Years[i];

                        @Html.HiddenFor(m => m.Years[i].ReportingYear)

                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell">
                                @(ReportingYearsHelper.FormatYearAsReportingPeriod(year.ReportingYear))
                            </td>
                            <td class="govuk-table__cell">
                                @(year.CurrentScope.IsInScopeVariant() ? "✅" : "❌")
                                @(year.CurrentScope)
                            </td>
                            <td class="govuk-table__cell">
                                @(year.HasReported ? "✅ Reported" : "❌ Not reported")
                            </td>
                            <td class="govuk-table__cell">
                                @if (year.CurrentScope != ScopeStatuses.InScope)
                                {
                                    @await Html.GovUkRadioItem(new RadioItemViewModel
                                    {
                                        Id = Html.IdFor(m => m.Years[i].NewScope),
                                        Name = Html.NameFor(m => m.Years[i].NewScope),
                                        Checked = year.NewScope == ScopeStatuses.InScope,
                                        Value = ScopeStatuses.InScope.ToString(),

                                        Label = new LabelViewModel
                                        {
                                            Html = @<text>
                                                       <span class="govuk-visually-hidden">
                                                           Mark reporting year
                                                           @(ReportingYearsHelper.FormatYearAsReportingPeriod(year.ReportingYear))
                                                           as In Scope
                                                       </span>
                                                    </text>
                                        }
                                    })
                                }
                            </td>
                            <td class="govuk-table__cell">
                                @if (year.CurrentScope != ScopeStatuses.OutOfScope)
                                {
                                    @await Html.GovUkRadioItem(new RadioItemViewModel
                                    {
                                        Id = Html.IdFor(m => m.Years[i].NewScope),
                                        Name = Html.NameFor(m => m.Years[i].NewScope),
                                        Checked = year.NewScope == ScopeStatuses.OutOfScope,
                                        Value = ScopeStatuses.OutOfScope.ToString(),

                                        Label = new LabelViewModel
                                        {
                                            Html = @<text>
                                                       <span class="govuk-visually-hidden">
                                                           Mark reporting year
                                                           @(ReportingYearsHelper.FormatYearAsReportingPeriod(year.ReportingYear))
                                                           as Out Of Scope
                                                       </span>
                                                    </text>
                                        }
                                    })
                                }
                            </td>
                            <td class="govuk-table__cell">
                                @await Html.GovUkRadioItem(new RadioItemViewModel
                                {
                                    Id = Html.IdFor(m => m.Years[i].NewScope),
                                    Name = Html.NameFor(m => m.Years[i].NewScope),
                                    Checked = year.NewScope != ScopeStatuses.InScope && year.NewScope != ScopeStatuses.OutOfScope,
                                    Value = "",

                                    Label = new LabelViewModel
                                    {
                                        Html = @<text>
                                                   <span class="govuk-visually-hidden">
                                                       Do not change the scope of reporting year
                                                       @(ReportingYearsHelper.FormatYearAsReportingPeriod(year.ReportingYear))
                                                   </span>
                                                </text>
                                    }
                                })
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            @await Html.GovUkCharacterCountFor(
                m => m.Reason,
                labelOptions: new LabelViewModel
                {
                    Text = "What is the reason for this change?",
                    Classes = "govuk-label--m"
                },
                formGroupOptions: new FormGroupViewModel
                {
                    Classes = "govuk-!-margin-top-6"
                })

            @(await Html.GovUkButton(new ButtonViewModel
            {
                Text = "Confirm",
                Classes = "govuk-!-margin-bottom-4"
            }))

            <p class="govuk-body">
                <a href="@Url.Action("ViewOrganisation", "AdminViewOrganisation", new {id = Model.Organisation.OrganisationId})"
                   class="govuk-link">
                    Cancel and return to organisation page
                </a>
            </p>

        </div>
    </div>

</form>
