@using GenderPayGap.Core.Classes
@using GenderPayGap.Core.Helpers
@using GenderPayGap.Database
@using GenderPayGap.WebUI.Classes.Formatters
@model GenderPayGap.WebUI.Models.Organisation.DisplayReportModel
@{
    string encryptedOrganisationId = Encryption.EncryptQuerystring(Model.Organisation.OrganisationId.ToString());
    string year = ReportingYearsHelper.FormatYearAsReportingPeriod(Model.ReportingYear, "/");

    OrganisationScope scopeForYear = Model.Organisation.GetScopeForYear(Model.ReportingYear);
    Return submittedReturn = Model.Organisation.GetReturn(Model.ReportingYear);
    DateTime snapshotDate = Model.Organisation.SectorType.GetAccountingStartDate(Model.ReportingYear);
    DateTime deadline = ReportingYearsHelper.GetDeadlineForAccountingDate(snapshotDate);
}

<tr class="govuk-table__row">

    <td class="govuk-table__cell govuk-!-font-weight-bold govuk-!-font-size-19">
        @year
    </td>

    <td class="govuk-table__cell govuk-!-font-size-19">
        <div>
            @if (!scopeForYear.IsInScopeVariant())
            {
                <span>NOT REQUIRED TO REPORT</span>
            }
            else
            {
                <span>REQUIRED TO REPORT <br/> by @(deadline.ToString("d MMM yyyy"))</span>
            }
        </div>
        @if (Model.CanChangeScope)
        {
            <div>
                <a href="@(Url.Action("ChangeOrganisationScope", "Scope", new { encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear }))">
                    Change<span class="visually-hidden"> scope for year @year</span>
                </a>
            </div>
        }
    </td>

    <td class="govuk-table__cell govuk-!-font-size-19">
        @{
            bool isReportAvailable = submittedReturn != null;
            bool isDraftAvailable = Model.HasDraftReturnForYear;

            string returnOrDraftInfoIsAvailable = Encryption.EncryptAsParams(Model.Organisation.OrganisationId.ToString(), Model.ReportingYear.ToString(), true.ToString());
            string returnOrDraftInfoIsNotAvailable = Encryption.EncryptAsParams(Model.Organisation.OrganisationId.ToString(), Model.ReportingYear.ToString(), false.ToString());
        }

        <div>
            @if (submittedReturn == null)
            {
                <span>Your organisation has not reported</span>
            }
            else
            {
                <span>Reported </span>
                if (submittedReturn.IsVoluntarySubmission())
                {
                    <span>voluntarily</span>
                }
                var modifiedDateFormatter = new GDSDateFormatter(submittedReturn.Modified);
                <span> on @modifiedDateFormatter.FullStartDate</span>
            }
        </div>
        <br/>
        @{
            string newUrl = Url.Action("ReportOverview", "ReportOverview",
                new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear});
            string returnOrDraftAvailableUrl = Url.Action("ReportForOrganisation", new {request = returnOrDraftInfoIsAvailable});
            string returnOrDraftUnavailableUrl = Url.Action("ReportForOrganisation", new { request = returnOrDraftInfoIsNotAvailable });
            bool useNewUrl = FeatureFlagHelper.IsFeatureEnabled(FeatureFlag.NewReportingJourney);
        }

        @if (!isReportAvailable && !isDraftAvailable)
        {
            <a class="button"
               href="@(useNewUrl ? newUrl : returnOrDraftUnavailableUrl)">
                <span>Draft report<span class="visually-hidden"> for year @year</span></span>
            </a>
        }


        @if (!isReportAvailable && isDraftAvailable)
        {
            <a class="button"
               href="@(useNewUrl ? newUrl : returnOrDraftAvailableUrl)">
                <span>Edit draft<span class="visually-hidden"> for year @year</span></span>
            </a>
        }

        @if (isReportAvailable && !isDraftAvailable)
        {
            <a class="button"
               href="@(useNewUrl ? newUrl : returnOrDraftAvailableUrl)">
                <span>Edit Report<span class="visually-hidden"> for year @year</span></span>
            </a>
        }

        @if (isReportAvailable && isDraftAvailable)
        {
            <a class="button"
               href="@(useNewUrl ? newUrl : returnOrDraftAvailableUrl)">
                <span>Edit draft report<span class="visually-hidden"> for year @year</span></span>
            </a>
        }
    </td>

</tr>
