@using GenderPayGap.Core
@using GenderPayGap.Database.Models
@using GenderPayGap.WebUI.Views.AdminFeedback
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model List<GenderPayGap.Database.Models.Feedback>

@{
    ViewBag.Title = $"View feedback - Administration - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
{
            new CrumbViewModel
            {
                Text = "Admin",
                Href = Url.Action("Home", "Admin")
            },
            new CrumbViewModel
            {
                Text = "View feedback"
            }
        };
    }

    @(Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">

        <span class="govuk-caption-xl">Administration</span>
        <h1 class="govuk-heading-xl">View feedback</h1>
        
        <p class="govuk-body">
            Download
            <a href="@Url.Action("DownloadFeedback", "AdminFeedback", new{ nonSpamOnly = true })"
               class="govuk-link">
                non-spam feedback
            </a>
            <br/>
            Download
            <a href="@Url.Action("DownloadFeedback", "AdminFeedback")"
               class="govuk-link">
                all feedback (new, non-spam, spam)
            </a>
        </p>

        @{
            List<Feedback> newFeedback = Model
                .Where(f => f.FeedbackStatus == FeedbackStatus.New)
                .OrderByDescending(f => f.CreatedDate)
                .ToList();
        }

        @(Html.Partial("ViewFeedbackRowsPartial", new ViewFeedbackRowsPartialViewModel
        {
            FeedbackTitle = "new feedback responses",
            FeedbackRows = newFeedback,
            ButtonClasses = "",
            Open = true,
            ShowMarkAsSpamButton = true,
            ShowMarkAsNotSpamButton = true,
        }))

        @{
            List<Feedback> nonSpamFeedback = Model
                .Where(f => f.FeedbackStatus == FeedbackStatus.NotSpam)
                .OrderByDescending(f => f.CreatedDate)
                .ToList();
        }

        @(Html.Partial("ViewFeedbackRowsPartial", new ViewFeedbackRowsPartialViewModel
        {
            FeedbackTitle = "non-spam responses",
            FeedbackRows = nonSpamFeedback,
            ButtonClasses = "govuk-button--secondary",
            Open = true,
            ShowMarkAsSpamButton = true,
            ShowMarkAsNotSpamButton = false,
        }))

        @{
            List<Feedback> spamFeedback = Model
                .Where(f => f.FeedbackStatus == FeedbackStatus.Spam)
                .OrderByDescending(f => f.CreatedDate)
                .ToList();
        }

        @(Html.Partial("ViewFeedbackRowsPartial", new ViewFeedbackRowsPartialViewModel
        {
            FeedbackTitle = "spam responses",
            FeedbackRows = spamFeedback,
            ButtonClasses = "govuk-button--secondary",
            Open = false,
            ShowMarkAsSpamButton = false,
            ShowMarkAsNotSpamButton = true,
        }))

    </div>
</div>