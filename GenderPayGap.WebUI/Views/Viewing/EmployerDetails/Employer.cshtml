@using GenderPayGap.Database
@using GenderPayGap.WebUI.Models.Shared
@using GenderPayGap.Core
@using GenderPayGap.Core.Helpers
@using GenderPayGap.WebUI.Models.Search
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using Newtonsoft.Json
@model EmployerDetailsViewModel
@{
    Organisation organisation = Model.Organisation;
    ViewBag.Title = $"Gender pay gap for {organisation.OrganisationName} - GOV.UK";
    ViewBag.pageDescription = $"View gender pay gap details for {organisation.OrganisationName} and compare with other organisations";
    ViewBag.ogTitle = ViewBag.Title;
    ViewBag.ogType = "business.gender_pay_gap";
    ViewBag.pageClass = "employer-report-page";

    string employerIdentifier = organisation.GetEncryptedId();

    string backUrl = !string.IsNullOrWhiteSpace(Model.EmployerBackUrl) ? Model.EmployerBackUrl : !string.IsNullOrWhiteSpace(Model.LastSearchUrl) ? Model.LastSearchUrl : "/";
    if (string.IsNullOrWhiteSpace(ViewBag.ReturnUrl))
    {
        ViewBag.ReturnUrl = Context.GetUri().PathAndQuery;
    }
    var viewModel = new AddRemoveButtonViewModel {OrganisationIdEncrypted = employerIdentifier, OrganisationName = organisation.OrganisationName};
}

<partial name="~/Views/Compare/ComparisonBasket.cshtml" model="ViewBag.BasketViewModel"/>
<div class="grid-row">
    <div class="column-full">
        <div class="grid-row">
            <div class="column-full">
                <h1 class="heading-large">
                    <span id="OrganisationName">
                        Gender pay gap reports for <br/> @organisation.OrganisationName
                    </span>
                </h1>
                @if (organisation.OrganisationNames.Count > 1)
                {
                    <div class="panel">
                        <div>Previously known as</div>
                        <strong>@organisation.OrganisationNames.ElementAt(organisation.OrganisationNames.Count - 2).Name</strong>
                    </div>
                }
            </div>
        </div>

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-full">
                <dl class="metadata employer-report-metadata">
                    <div>
                        <dt class="metadata-text-label">Registered address:</dt>
                        <dd class="metadata-text-value">@(organisation.GetLatestAddress()?.GetAddressString())</dd>
                    </div>
                    <div>
                        <dt class="metadata-text-label">Nature of business (SIC):</dt>
                        <dd class="metadata-text-value">@organisation.GetSicSectorsString()</dd>
                    </div>
                </dl>
            </div>
        </div>
        <div class="govuk-grid-row add-remove-employer-section">
            <partial name="~/Views/Compare/AddRemoveEmployer.cshtml" model="viewModel"/>
        </div>

        <div class="grid-row">
            <div class="column-two-thirds ">
                <div class="grid-row">
                    <div class="column-full">
                        <hr style="margin-top: 0"/>
                        <div class="body" style="margin-top: 2em">
                            @await Html.PartialModelAsync(new Details
                            {
                                Id = "WhoNeedsToReport",
                                LinkText = "Who is required to report, and the deadlines",
                                SummaryPartial = "EmployerDetails/WhoNeedsToReport"
                            })
                            @{
                                var years = organisation.GetRecentReports(Global.ShowReportYearCount).Select(report => report.GetReportingPeriod()).ToArray();
                                var options = new List<SelectItemViewModel>();
                                foreach (string year in years)
                                {
                                    SelectItemViewModel option = new SelectItemViewModel()
                                    {
                                        Value = year,
                                        Text = year,
                                    };
                                    options.Add(option);
                                }

                                Html.GovUkSelect(new SelectViewModel()
                                {
                                    Classes = "govuk-select",
                                    Items = options
                                });
                                <div id="filteringArea">
                                    <input type="hidden" id="selectOptionsFromReports"
                                           value=@JsonConvert.SerializeObject(
                                                     organisation.GetRecentReports(
                                                         Global.ShowReportYearCount)
                                                         .Select(
                                                             report => report.GetReportingPeriod())
                                                         .ToArray())>
                                </div>
                            }
                            @if (organisation.GetSubmittedReports().Any() && organisation.Status == OrganisationStatuses.Retired)
                            {
                                <div class="govuk-warning-text" id="warningText">
                                    <span class="govuk-warning-text__icon" aria-hidden="true" style="top: calc(50% - 15px)">!</span>
                                    <strong class="govuk-warning-text__text">
                                        <span class="govuk-warning-text__assistive">Notice</span>
                                        This page is no longer updated. The organisation may no longer be in operation or operating under a different name
                                    </strong>
                                </div>
                            }
                        </div>


                    </div>
                </div>
                @{ 
                    var mobileRows = organisation
                        .GetRecentReports(Global.ShowReportYearCount)
                        .Select
                        (
                            report => new TableRowViewModel
                            {
                                Row = new List<TableCellViewModel>
                                {
                                    new TableCellViewModel
                                    {
                                        Html = 
                                            @<text>
                                                <h3 class="heading-small govuk-!-margin-top-0 yearTextForFiltering">@report.GetReportingPeriod() Reporting year</h3>

                                                @{
                                                    ReportStatusBadgeType reportStatus = report.GetBadgeType;
                                                    
                                                    if(report.GetBadgeType == ReportStatusBadgeType.NotRequired && organisation.GetIsInscope(report.AccountingDate.Year))
                                                    {
                                                        reportStatus = ReportStatusBadgeType.Due;
                                                    }
                                                    
                                                    await Html.RenderPartialAsync("EmployerDetails/Parts/_ReportStatusBadge",
                                                        new ReportStatusBadgeViewModel
                                                        {
                                                            DateText = ReportingYearsHelper.GetDeadlineForAccountingDate(report.AccountingDate).ToString("d MMMM yyyy"),
                                                            ReportStatus = reportStatus
                                                        });
                                                }
                                                    
                                                <br>
                                                @switch(reportStatus)
                                                {
                                                    case ReportStatusBadgeType.NotRequiredDueToCovid:
                                                            <p>
                                                                The deadline for 2019/20
                                                                @(report.AccountingDate.AddYears(1) > VirtualDateTime.Now ? "is" : "was")
                                                                @(report.AccountingDate.AddYears(1).AddDays(-1).ToString("d MMMM yyyy")). Due to
                                                                Coronavirus (COVID-19), enforcement of reporting deadlines does not
                                                                apply to employers in the 2019/20 reporting year.
                                                            </p>
                                                        break;
                                                    case ReportStatusBadgeType.Reported:
                                                            <a style="font-size: 19px !important;" href="@(Url.Action("Report", new {employerIdentifier, year = report.AccountingDate.Year}))">
                                                                View report <span class="visually-hidden">for @report.GetReportingPeriod()</span>
                                                            </a>
                                                            <p>
                                                                This report was due for @ReportingYearsHelper.GetDeadlineForAccountingDate(report.AccountingDate).ToString("dd/MM/yyyy")
                                                            </p>
                                                        break;
                                                }
                                            </text>
                                    }
                                }
                            }
                        )
                        .ToList();
                    var desktopHeader = new TableRowViewModel
                    {
                        Row = new List<TableCellViewModel>
                        {
                            new TableCellViewModel
                            {
                                Html = @<text>
                                           <div>
                                               <div class="govuk-grid-column-one-half govuk-!-padding-left-0">
                                                   <h3 class="heading-medium govuk-!-margin-top-0 govuk-!-margin-bottom-0 ">Reporting Year</h3>
                                               </div>
                                               <div class="govuk-grid-column-one-half govuk-!-padding-left-0">
                                                   <h3 class="heading-medium govuk-!-margin-top-0 govuk-!-margin-bottom-0 govuk-employer-table-right">Report Status</h3>
                                               </div>

                                           </div>
                                        </text>
                            }
                        }
                    };
                    var desktopRows = organisation
                            .GetRecentReports(Global.ShowReportYearCount)
                            .Select(
                            report => new TableRowViewModel
                            {
                                Row = new List<TableCellViewModel>
                                {
                                    new TableCellViewModel
                                    {
                                        Html = 
                                            @<text>
                                                <div class="govuk-grid-column-full govuk-!-padding-left-0 govuk-!-padding-right-0 govuk-!-margin-bottom-2">
                                                    <div class="govuk-grid-column-one-half govuk-!-padding-left-0">
                                                        <h3 class="heading-small govuk-!-margin-top-0 yearTextForFiltering">@report.GetReportingPeriod()</h3>
                                                    </div>
                                                    
                                                    @{
                                                        ReportStatusBadgeType reportStatus = report.GetBadgeType;
    
                                                        if (report.GetBadgeType == ReportStatusBadgeType.NotRequired && organisation.GetIsInscope(report.AccountingDate.Year))
                                                        {
                                                            reportStatus = ReportStatusBadgeType.Due;
                                                        }
    
                                                        <div class="govuk-grid-column-one-half govuk-!-padding-right-0">
                                                            @{ await Html.RenderPartialAsync("EmployerDetails/Parts/_ReportStatusBadge",
                                                                   new ReportStatusBadgeViewModel
                                                                   {
                                                                       DateText = ReportingYearsHelper.GetDeadlineForAccountingDate(report.AccountingDate).ToString("d MMMM yyyy"),
                                                                       ReportStatus = reportStatus,
                                                                       Desktop = true
                                                                   }); }
                                                        </div>
                                                    }
                                                </div>
                                                <br>
                                                
                                                @switch (reportStatus)
                                                {
                                                    case ReportStatusBadgeType.NotRequiredDueToCovid:
                                                        <p class="govuk-body">
                                                            The deadline for 2019/20
                                                            @(report.AccountingDate.AddYears(1) > VirtualDateTime.Now ? "is" : "was")
                                                            @(report.AccountingDate.AddYears(1).AddDays(-1).ToString("d MMMM yyyy")). Due to
                                                            Coronavirus (COVID-19), enforcement of reporting deadlines does not
                                                            apply to employers in the 2019/20 reporting year.
                                                        </p>
                                                        break;
                                                    case ReportStatusBadgeType.Reported:
                                                        <div class="govuk-grid-column-full govuk-!-padding-left-0 govuk-!-padding-right-0">
                                                            <div class="govuk-grid-column-two-thirds govuk-!-padding-left-0">
                                                                <p class="govuk-body">
                                                                    This report was due for @ReportingYearsHelper.GetDeadlineForAccountingDate(report.AccountingDate).ToString("dd/MM/yyyy")
                                                                </p>
                                                            </div>
                                                            
                                                            <div class="govuk-grid-column-one-third govuk-!-padding-right-0">
                                                                <a class="govuk-link govuk-employer-table-right" href="@(Url.Action("Report", new { employerIdentifier, year = report.AccountingDate.Year }))">
                                                                    View report <span class="visually-hidden">for @report.GetReportingPeriod()</span>
                                                                </a>
                                                            </div>

                                                        </div>
                                                        break;
                                                }
                                             </text>
                                    }
                                }
                            }
                        ).ToList();
                    
                    
                    int indexOfCompanyJoined = organisation.GetRecentReports(Global.ShowReportYearCount).ToList().FindIndex(report => Model.Organisation.Created > ReportingYearsHelper.GetDeadlineForAccountingDate(report.AccountingDate));
                    var dateJoinedRow = new TableRowViewModel
                    {
                        Row = new List<TableCellViewModel>
                        {
                            new TableCellViewModel
                            {
                                Html = @<text>
                                            @await Html.GovUkHint(
                                                     new HintViewModel
                                                     {
                                                         Text = "Employer joined Gender Pay Gap service on " + @Model.Organisation.Created.ToString("dd/MM/yyyy"),
                                                         Classes = "govuk-!-margin-top-4 govuk-!-text-align-centre"
                                                     })
                                        </text>
                            }
                        }
                    };

                    if(indexOfCompanyJoined >= 0)
                    {
                        mobileRows.Insert(indexOfCompanyJoined, dateJoinedRow);
                        desktopRows.Insert(indexOfCompanyJoined, dateJoinedRow);
                    }
                    else
                    {
                        mobileRows.Add(dateJoinedRow);
                        desktopRows.Add(dateJoinedRow);
                    }
                    if (desktopRows.Count > 0)
                    {
                        desktopRows.Insert(0,desktopHeader);
                    }

                }
                @await Html.GovUkTable(new TableGovUkViewModel
                    {
                        Head = new List<TableCellViewModel>(),
                        Rows = desktopRows,
                        Classes = "gpg-govuk-hideOnMobile"
                    })
                @await Html.GovUkTable(new TableGovUkViewModel
                    {
                        FirstCellIsHeader = false,
                        Head = new List<TableCellViewModel>(),
                        Rows = mobileRows,
                        Classes = "gpg-govuk-hideOnDesktop"
                    })
            </div>

            @await Html.PartialAsync("/Views/Submit/RelatedContent.cshtml")
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function() {
            "use strict";

            new GOVUK.Ajaxify({
                onError: function(errorCode, error, errorThrown) {
                    window.location.href = '/error';
                }
            });
        }());
        
        var parentForSelect = document.getElementById("filteringArea");
        
        var selectLabel = document.createElement("label");
        selectLabel.className = "govuk-label";
        selectLabel.for = "yearFilter";
        selectLabel.textContent = "Filter for a reporting period";
        
        var elements = document.getElementsByClassName("yearTextForFiltering");
        
        var selectList = document.createElement("select");
        selectList.className = "govuk-select govuk-!-margin-bottom-3";
        selectList.id = "filterYearSelect";
        selectList.addEventListener("change",function (e){
            for (var i = 0; i < elements.length; i++){
                var tableRow = elements[i].closest("tr");
                tableRow.hidden = true;
                
                if (elements[i].innerHTML.includes(e.target.value) || e.target.value === "Show All"){
                    tableRow.hidden = false;
                }
            }
        }) 
        
        var selectHint = document.createElement("div");
        selectHint.className = "govuk-hint";
        selectHint.textContent = "For example, if the snapshot date is 5 April 2017 but the deadline is 4 April 2018 then the reporting period is 2017 - 2018.";
       
        parentForSelect.appendChild(selectLabel);
        parentForSelect.appendChild(selectList);
        parentForSelect.appendChild(selectHint);

        var showAll = document.createElement("option");
        showAll.value = "Show All";
        showAll.text = "Show All";
        showAll.selected = true;
        selectList.appendChild(showAll);
        
        var arrayOfYears = JSON.parse(document.getElementById("selectOptionsFromReports").value);
        for (var i = 0; i < arrayOfYears.length; i++){
             var option = document.createElement("option");
             option.value = arrayOfYears[i];
             option.text = arrayOfYears[i];
             selectList.appendChild(option);
        }
        
    </script>
}
