@using GenderPayGap.WebUI.Models.Shared.Patterns
@using GenderPayGap.Core.Helpers
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.WebUI.BusinessLogic.Models.Submit.ReturnViewModel

@{
    var controller = ViewData["Controller"] as BaseController;
    var reportingOrganisation = controller.ReportingOrganisation;
    var breadcrumbModel = new ManageOrganisationBreadcrumbs
    {
        OrganisationName = reportingOrganisation.OrganisationName,
        EncryptedOrganisationId = Encryption.EncryptQuerystring(reportingOrganisation.OrganisationId.ToString()),
        PageText = ReportingYearsHelper.FormatYearAsReportingPeriod(Model.ReportInfo.ReportingStartDate.Year) + " Reporting year"
    };
}

<partial name="Patterns/ManageOrganisationBreadcrumbs" model="breadcrumbModel" />

@using (Html.BeginForm())
{
    <div class="grid-row">
        <div class="column-two-thirds">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.ReturnId)
            @Html.HiddenFor(model => model.OrganisationId)
            @Html.HiddenFor(model => model.EncryptedOrganisationId)
            @Html.HiddenFor(model => model.ShouldProvideLateReason)

            @*@Html.HiddenFor(model => model.ReportInfo.Draft)*@
            @Html.HiddenFor(model => model.ReportInfo.ReportModifiedDate)
            @Html.HiddenFor(model => model.ReportInfo.ReportingStartDate)

            @Html.HiddenFor(model => model.FirstName)
            @Html.HiddenFor(model => model.JobTitle)
            @Html.HiddenFor(model => model.LastName)
            @Html.HiddenFor(model => model.AccountingDate)
            @Html.HiddenFor(model => model.SectorType)
            @Html.HiddenFor(model => model.OrganisationSize)
            @Html.HiddenFor(model => model.CompanyLinkToGPGInfo)
            @Html.HiddenFor(model => model.EHRCResponse)
            @Html.HiddenFor(model => model.LateReason)

            @{
                if (Model.ReturnUrl.EqualsI("CheckData"))
                {
                    <a class="link-back" href="@Url.Action("CheckData")">Back <span class="visuallyhidden"> to the previous step</span></a>
                }
            }

            @await Html.CustomValidationSummaryAsync(true, "There is a problem")

            <h1 class="heading-large">
                Enter your gender pay gap data for snapshot date @(Model.ReportInfo.ReportingStartDate.ToString("dd MMMM yyyy"))
            </h1>
            @await Html.PartialAsync("ReportingOrgPart", controller.ReportingOrganisation.OrganisationName)
        </div>
    </div>


    <div class="grid-row">
        <div class="column-two-thirds">
            <p>For differences in hourly pay and bonus pay, a positive <span aria-hidden="true" aria-label="percentage">%</span> indicates that men in your organisation are paid more than women in your organisation.</p>
            <p>A negative <span aria-hidden="true" aria-label="percentage">%</span> indicates that men in your organisation are paid less than women in your organisation.</p>

            <p>
                <strong>Please enter your data to 1 decimal point.</strong>
            </p>

            <div class="form-horizontal">
                <h2 id="PayQuartiles" class="heading-medium">Percentage of men and women in each hourly pay quarter</h2>
                @if (ReportingYearsHelper.IsReportingYearWithFurloughScheme(Model.AccountingDate))
                {
                    <div class="govuk-form-group">
                        <div class="govuk-checkboxes__item">
                            <input class="govuk-checkboxes__input" id="OptedOutOfReportingPayQuarters" value="true" name="OptedOutOfReportingPayQuarters" type="checkbox" onChange="showOrHidePayQuarters();" checked="@Model.OptedOutOfReportingPayQuarters">
                            @* TODO GPG-794 *@
                            <label class="govuk-label govuk-checkboxes__label" for="OptedOutOfReportingPayQuarters">
                                TO DO OptedOutOfReportingPayQuarters
                            </label>
                        </div>
                    </div>
                }
                @{ var payQuartersDisplay = Model.OptedOutOfReportingPayQuarters ? "none" : "block";}
                <div id="PayQuarters" style="display: @payQuartersDisplay">
                    <fieldset>
                        <legend>
                            <h3 class="heading-small">Upper hourly pay quarter</h3>
                        </legend>
                        <div class="form-group @Html.SetErrorClass(model => model.MaleUpperQuartilePayBand, "error")">
                            @Html.LabelFor(model => model.MaleUpperQuartilePayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.MaleUpperQuartilePayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.MaleUpperQuartilePayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                        <div class="form-group @Html.SetErrorClass(model => model.FemaleUpperQuartilePayBand, "error") @Html.SetErrorClass(model => model.FemaleUpperQuartilePayBand, "error")">
                            @Html.LabelFor(model => model.FemaleUpperQuartilePayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.FemaleUpperQuartilePayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.FemaleUpperQuartilePayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                    </fieldset>

                    <fieldset>
                        <legend>
                            <h3 class="heading-small">Upper middle hourly pay quarter</h3>
                        </legend>
                        <div class="form-group @Html.SetErrorClass(model => model.MaleUpperPayBand, "error")">
                            @Html.LabelFor(model => model.MaleUpperPayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.MaleUpperPayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.MaleUpperPayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                        <div class="form-group @Html.SetErrorClass(model => model.FemaleUpperPayBand, "error")">
                            @Html.LabelFor(model => model.FemaleUpperPayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.FemaleUpperPayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.FemaleUpperPayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                    </fieldset>

                    <fieldset>
                        <legend>
                            <h3 class="heading-small">Lower middle hourly pay quarter</h3>
                        </legend>
                        <div class="form-group @Html.SetErrorClass(model => model.MaleMiddlePayBand, "error")">
                            @Html.LabelFor(model => model.MaleMiddlePayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.MaleMiddlePayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.MaleMiddlePayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                        <div class="form-group @Html.SetErrorClass(model => model.FemaleMiddlePayBand, "error")">
                            @Html.LabelFor(model => model.FemaleMiddlePayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.FemaleMiddlePayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.FemaleMiddlePayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                    </fieldset>

                    <fieldset>
                        <legend>
                            <h3 class="heading-small">Lower hourly pay quarter</h3>
                        </legend>
                        <div class="form-group @Html.SetErrorClass(model => model.MaleLowerPayBand, "error")">
                            @Html.LabelFor(model => model.MaleLowerPayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.MaleLowerPayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.MaleLowerPayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                        <div class="form-group @Html.SetErrorClass(model => model.FemaleLowerPayBand, "error")">
                            @Html.LabelFor(model => model.FemaleLowerPayBand, new { @class = "form-label" })
                            @Html.ValidationMessageFor(model => model.FemaleLowerPayBand, "", new { @class = "error-message" })
                            @Html.CustomEditorFor(model => model.FemaleLowerPayBand, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                        </div>
                    </fieldset>
                </div>

                <fieldset id="HourlyPay">
                    <legend>
                        <h2 class="heading-medium">Mean gender pay gap using hourly pay</h2>
                    </legend>
                    <div class="form-group @Html.SetErrorClass(model => model.DiffMeanHourlyPayPercent, "error")">
                        @Html.LabelFor(model => model.DiffMeanHourlyPayPercent, new { @class = "form-label " })
                        @Html.ValidationMessageFor(model => model.DiffMeanHourlyPayPercent, "", new { @class = "error-message" })
                        @Html.CustomEditorFor(model => model.DiffMeanHourlyPayPercent, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                    </div>
                </fieldset>

                <fieldset>
                    <legend>
                        <h2 class="heading-medium">Median gender pay gap using hourly pay</h2>
                    </legend>
                    <div class="form-group @Html.SetErrorClass(model => model.DiffMedianHourlyPercent, "error")">
                        @Html.LabelFor(model => model.DiffMedianHourlyPercent, new { @class = "form-label" })
                        @Html.ValidationMessageFor(model => model.DiffMedianHourlyPercent, "", new { @class = "error-message" })
                        @Html.CustomEditorFor(model => model.DiffMedianHourlyPercent, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                    </div>
                </fieldset>

                <fieldset id="BonusPayFigures">
                    <legend>
                        <h2 class="heading-medium">Percentage of men and women who received bonus pay</h2>
                    </legend>
                    <div class="form-group @Html.SetErrorClass(model => model.MaleMedianBonusPayPercent, "error")">
                        @Html.LabelFor(model => model.MaleMedianBonusPayPercent, new { @class = "form-label" })
                        @Html.ValidationMessageFor(model => model.MaleMedianBonusPayPercent, "", new { @class = "error-message" })
                        @Html.CustomEditorFor(model => model.MaleMedianBonusPayPercent, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                    </div>
                    <div class="form-group @Html.SetErrorClass(model => model.FemaleMedianBonusPayPercent, "error")">
                        @Html.LabelFor(model => model.FemaleMedianBonusPayPercent, new { @class = "form-label" })
                        @Html.ValidationMessageFor(model => model.FemaleMedianBonusPayPercent, "", new { @class = "error-message" })
                        @Html.CustomEditorFor(model => model.FemaleMedianBonusPayPercent, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                    </div>
                </fieldset>

                <fieldset id="BonusPay">
                    <legend>
                        <h2 class="heading-medium">Mean gender pay gap using bonus pay</h2>
                    </legend>
                    <div class="form-group @Html.SetErrorClass(model => model.DiffMeanBonusPercent, "error")">
                        @Html.LabelFor(model => model.DiffMeanBonusPercent, new { @class = "form-label" })
                        @Html.ValidationMessageFor(model => model.DiffMeanBonusPercent, "", new { @class = "error-message" })
                        @Html.CustomEditorFor(model => model.DiffMeanBonusPercent, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                    </div>

                </fieldset>
                <fieldset>
                    <legend>
                        <h2 class="heading-medium">Median gender pay gap using bonus pay</h2>
                    </legend>
                    <div class="form-group @Html.SetErrorClass(model => model.DiffMedianBonusPercent, "error")">
                        @Html.LabelFor(model => model.DiffMedianBonusPercent, new { @class = "form-label" })
                        @Html.ValidationMessageFor(model => model.DiffMedianBonusPercent, "", new { @class = "error-message" })
                        @Html.CustomEditorFor(model => model.DiffMedianBonusPercent, new { @class = "form-control form-control-1-4" }) <span aria-hidden="true" aria-label="percent">%</span>
                    </div>
                </fieldset>
            </div>
            <br />
            <p>Selecting continue will save a draft of your gender pay gap figures. You will be able to review and edit before submitting your gender pay gap information.</p>
            @await Html.PartialAsync("SaveAndCancelButtons", controller.ReportingOrganisation.OrganisationName)
        </div>
        @await Html.PartialAsync("RelatedContent")
    </div>
}


@section Scripts {
    <script>
        function clearChildren(element) {
            for (var i = 0; i < element.childNodes.length; i++) {
                var e = element.childNodes[i];
                if (e.tagName && e.tagName.toLowerCase() === "input") {
                    e.value = null;
                } else {
                    clearChildren(e);
                }
            }
        }

        function showOrHidePayQuarters() {
            const payQuarters = document.getElementById("PayQuarters");
            if (!payQuarters) {
                return;
            }

            const optedOutOfReportingPayQuarters = document.getElementById("OptedOutOfReportingPayQuarters");
            if (optedOutOfReportingPayQuarters && optedOutOfReportingPayQuarters.checked) {
                payQuarters.style.display = "none";
                clearChildren(payQuarters);
            }
            else {
                payQuarters.style.display = "block";
            }
        }
    </script>
}
