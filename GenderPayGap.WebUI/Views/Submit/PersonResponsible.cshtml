@model GenderPayGap.WebUI.BusinessLogic.Models.Submit.ReturnViewModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ReturnId)
    @Html.HiddenFor(model => model.OrganisationId)
    @Html.HiddenFor(model => model.EncryptedOrganisationId)
    @Html.HiddenFor(model => model.ShouldProvideLateReason)

    @Html.HiddenFor(model => model.ReportInfo.ReportModifiedDate)
    @Html.HiddenFor(model => model.ReportInfo.ReportingStartDate)

    @Html.HiddenFor(model => model.DiffMeanBonusPercent)
    @Html.HiddenFor(model => model.DiffMeanHourlyPayPercent)
    @Html.HiddenFor(model => model.DiffMedianBonusPercent)
    @Html.HiddenFor(model => model.DiffMedianHourlyPercent)
    @Html.HiddenFor(model => model.FemaleLowerPayBand)
    @Html.HiddenFor(model => model.FemaleMedianBonusPayPercent)
    @Html.HiddenFor(model => model.FemaleMiddlePayBand)
    @Html.HiddenFor(model => model.FemaleUpperPayBand)
    @Html.HiddenFor(model => model.FemaleUpperQuartilePayBand)
    @Html.HiddenFor(model => model.MaleLowerPayBand)
    @Html.HiddenFor(model => model.MaleMedianBonusPayPercent)
    @Html.HiddenFor(model => model.MaleMiddlePayBand)
    @Html.HiddenFor(model => model.MaleUpperPayBand)
    @Html.HiddenFor(model => model.MaleUpperQuartilePayBand)
    @Html.HiddenFor(model => model.AccountingDate)
    @Html.HiddenFor(model => model.SectorType)
    @Html.HiddenFor(model => model.OrganisationSize)
    @Html.HiddenFor(model => model.CompanyLinkToGPGInfo)
    @Html.HiddenFor(model => model.EHRCResponse)
    @Html.HiddenFor(model => model.LateReason)
    @Html.HiddenFor(model => model.OptedOutOfReportingPayQuarters)

    var controller = ViewData["Controller"] as BaseController;

    string backLink;
    if (Model.ReturnUrl.EqualsI("CheckData"))
    {
        backLink = Url.Action("CheckData");
    }
    else
    {
        backLink = Url.Action("EnterCalculations");
    }
    <div class="grid-row">
        <div class="column-two-thirds">
            <a class="link-back" href="@backLink">Back <span class="visuallyhidden"> to the previous step</span></a>
            @await Html.CustomValidationSummaryAsync()
            <h1 class="heading-large">
                Person responsible in your organisation
            </h1>
            @await Html.PartialAsync("ReportingOrgPart", controller.ReportingOrganisation.OrganisationName)
        </div>
    </div>
    <div class="grid-row">
        <div class="column-two-thirds">
            <p>
                Enter the name and job title of the person in your organisation who has responsibility for confirming the accuracy of the gender pay gap information being submitted for this reporting year.
            </p>
            <p>
                This person should be the same person that must sign your
                <a href="https://www.gov.uk/guidance/the-gender-pay-gap-information-employers-must-report#written-statement" target="_blank" rel="noopener">
                    written statement
                    <span class="visually-hidden">(opens in a new window)</span>
                </a> confirming the accuracy of your submitted gender pay gap information. You must publish your written statement on your public-facing website.
            </p>
            <div class="form-horizontal">
                <fieldset>
                    <div class="form-group @Html.SetErrorClass(model => model.FirstName, "error")">
                        @Html.LabelFor(model => model.FirstName, new {@class = "form-label col-md-2"})
                        @Html.ValidationMessageFor(model => model.FirstName, "", new {@class = "error-danger"})
                        <div class="col-md-10">
                            @Html.CustomEditorFor(model => model.FirstName, new {@class = "form-control"})
                        </div>
                    </div>

                    <div class="form-group @Html.SetErrorClass(model => model.LastName, "error")">
                        @Html.LabelFor(model => model.LastName, new {@class = "form-label col-md-2"})
                        @Html.ValidationMessageFor(model => model.LastName, "", new {@class = "error-danger"})
                        <div class="col-md-10">
                            @Html.CustomEditorFor(model => model.LastName, new {@class = "form-control"})
                        </div>
                    </div>

                    <div class="form-group @Html.SetErrorClass(model => model.JobTitle, "error")">
                        @Html.LabelFor(model => model.JobTitle, new {@class = "form-label col-md-2"})
                        @Html.ValidationMessageFor(model => model.JobTitle, "", new {@class = "error-danger"})
                        <div class="col-md-10">
                            @Html.CustomEditorFor(model => model.JobTitle, new {@class = "form-control"})
                        </div>
                    </div>
                </fieldset>
            </div>
            <br/>
            @await Html.PartialAsync("SaveAndCancelButtons", controller.ReportingOrganisation.OrganisationName)
        </div>
        @await Html.PartialAsync("RelatedContent")
    </div>
}
