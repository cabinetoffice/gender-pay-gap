@using GenderPayGap.Core
@using GenderPayGap.WebUI.Classes.Formatters
@using GenderPayGap.WebUI.Models.Scope
@using Microsoft.AspNetCore.Html
@model GenderPayGap.WebUI.Models.Scope.ScopingViewModel
@{
    ViewBag.Title = "Tell us why your organisation is not in scope - Gender pay gap reporting service";
    var controller = ViewData["Controller"] as BaseController;
    string backLink = Model.IsChangeJourney && Model.IsOutOfScopeJourney ? Model.StartUrl : Url.Action("ConfirmOutOfScopeDetails");

    // handles the reason error css class
    HtmlString reasonErrorClass = null;
    if (string.IsNullOrEmpty(Model.EnterAnswers.Reason))
    {
        reasonErrorClass = Html.SetErrorClass(nameof(EnterAnswersViewModel.Reason), "error");
    }
    else if (Model.EnterAnswers.Reason == "Other")
    {
        reasonErrorClass = Html.SetErrorClass(nameof(EnterAnswersViewModel.OtherReason), "error");
    }

    var under250Reason = "My organisation had fewer than 250 employees";
}
<div class="grid-row">
    <div class="column-two-thirds">
        @using (Html.BeginForm(null, null, FormMethod.Post, new {@class = "form", autocomplete = "off", novalidate = ""}))
        {
            @Html.AntiForgeryToken()

            <a id="BackLink" class="link-back" href="@backLink">Back <span class="visuallyhidden"> to the previous question</span></a>

            @await Html.CustomValidationSummaryAsync(false)

            <h1 class="heading-large">
                Tell us why your organisation doesn't need to report
            </h1>

            <div id="ReasonGroup" class="form-group @reasonErrorClass">
                <fieldset>
                    <legend>
                        <h1 class="heading-medium" style="margin-top: 15px">
                            Why is your organisation not required to report their gender pay gap data for
                            @if (Model.IsChangeJourney)
                            {
                                <span>the snapshot date @(new GDSDateFormatter(Model.AccountingDate).FullStartDate)?</span>
                            }
                            else
                            {
                                <span> both snapshot dates @(Model.AccountingDate.AddYears(-1).ToFriendlyDate()) and @(Model.AccountingDate.Year)?</span>
                            }
                        </h1>
                        @Html.ValidationMessage(nameof(EnterAnswersViewModel.Reason), "", new {id = "ReasonError", @class = "error-message"})
                        @if (Model.EnterAnswers.Reason == "Other")
                        {
                            @Html.ValidationMessage(nameof(EnterAnswersViewModel.OtherReason), "", new {id = "OtherReasonError", @class = "error-message"})
                        }
                    </legend>
                    <div class="multiple-choice">
                        <input id="Under250" type="radio" name="Reason" value="Under250" @(Model.EnterAnswers.Reason == "Under250" ? "checked" : "")>
                        <label for="Under250">@under250Reason</label>
                    </div>
                    <div class="multiple-choice" data-target="ShowOtherReason">
                        <input id="OtherReasonSelected" type="radio" name="Reason" value="Other" @(Model.EnterAnswers.Reason == "Other" ? "checked" : "")>
                        <label for="OtherReasonSelected">Other reason</label>
                    </div>
                    <div class="panel panel-border-narrow js-hidden" id="ShowOtherReason">
                        @Html.LabelFor(model => model.EnterAnswers.OtherReason, new {@class = "form-label"})
                        <textarea id="@nameof(EnterAnswersViewModel.OtherReason)" name="@nameof(EnterAnswersViewModel.OtherReason)" class="form-control"></textarea>
                    </div>
                </fieldset>
            </div>

            <div id="ReadGuidanceGroup" class="form-group @Html.SetErrorClass(nameof(EnterAnswersViewModel.ReadGuidance), "error")">
                <fieldset class="inline">
                    <legend>
                        <h1 class="heading-medium" style="margin-top: 15px">
                            Have you read our guidance, which explains who needs to report?
                        </h1>
                        <p class="form-hint">If you would like to read the guidance then you can find it <a href="@Global.WhoNeedsToReportGuidanceLink" target="_blank" rel="noopener noreferrer"><span class="visually-hidden">Find the guidance</span>here<span class="visually-hidden">(opens in a new window)</span></a></p>
                        @Html.ValidationMessage(nameof(EnterAnswersViewModel.ReadGuidance), "", new {id = "ReadGuidanceError", @class = "error-message"})
                    </legend>
                    <div class="multiple-choice">
                        <input id="ReadGuidanceYes" type="radio" name="ReadGuidance" value="true" @(Model.EnterAnswers.ReadGuidance == "true" ? "checked" : "")>
                        <label for="ReadGuidanceYes">Yes</label>
                    </div>
                    <div class="multiple-choice">
                        <input id="ReadGuidanceNo" type="radio" name="ReadGuidance" value="false" @(Model.EnterAnswers.ReadGuidance == "false" ? "checked" : "")>
                        <label for="ReadGuidanceNo">No</label>
                    </div>
                </fieldset>
            </div>

            if (controller.CurrentUser == null)
            {
                <p class="text">
                    Please provide your name and contact email
                </p>

                <fieldset>
                    <legend class="visuallyhidden">Contact Details</legend>
                    <div id="FirstNameGroup" class="form-group @(Html.SetErrorClass(nameof(EnterAnswersViewModel.FirstName), "error")) ">
                        @Html.LabelFor(model => model.EnterAnswers.FirstName, "First name", new {@class = "form-label"})
                        @Html.ValidationMessage(nameof(EnterAnswersViewModel.FirstName), "", new {id = "FirstNameError", @class = "error-message"})
                        <input name="@nameof(EnterAnswersViewModel.FirstName)" class="form-control" value="@(Model.EnterAnswers.FirstName)"/>
                    </div>
                    <div id="LastNameGroup" class="form-group @Html.SetErrorClass(nameof(EnterAnswersViewModel.LastName), "error") ">
                        @Html.LabelFor(model => model.EnterAnswers.LastName, "Last name", new {@class = "form-label"})
                        @Html.ValidationMessage(nameof(EnterAnswersViewModel.LastName), "", new {id = "LastNameError", @class = "error-message"})
                        <input name="@nameof(EnterAnswersViewModel.LastName)" class="form-control" value="@(Model.EnterAnswers.LastName)"/>
                    </div>
                </fieldset>

                <fieldset>
                    <legend class="visuallyhidden">Email</legend>
                    <div id="EmailAddressGroup" class="form-group @Html.SetErrorClass(nameof(EnterAnswersViewModel.EmailAddress), "error") ">
                        @Html.LabelFor(model => model.EnterAnswers.EmailAddress, "Enter your email address", new {@class = "form-label"})
                        @Html.ValidationMessage(nameof(EnterAnswersViewModel.EmailAddress), null, new {id = "EmailAddressError", @class = "error-message"})
                        <input type="email" name="@nameof(EnterAnswersViewModel.EmailAddress)" class="form-control" value="@(Model.EnterAnswers.EmailAddress)"/>
                    </div>
                    <div id="ConfirmEmailAddressGroup" class="form-group @Html.SetErrorClass(nameof(EnterAnswersViewModel.ConfirmEmailAddress), "error") ">
                        @Html.LabelFor(model => model.EnterAnswers.ConfirmEmailAddress, "Confirm your email address", new {@class = "form-label"})
                        @Html.ValidationMessage(nameof(EnterAnswersViewModel.ConfirmEmailAddress), "", new {id = "ConfirmEmailAddressError", @class = "error-message"})
                        <input type="email" name="@nameof(EnterAnswersViewModel.ConfirmEmailAddress)" class="form-control" value="@(Model.EnterAnswers.ConfirmEmailAddress)"/>
                    </div>
                </fieldset>
            }

            <div class="form-group">
                <input id="NextStep" type="submit" class="button" value="Continue"/>
            </div>
        }
    </div>
</div>