@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using GenderPayGap.Core
@using GenderPayGap.Core.Helpers
@model GenderPayGap.WebUI.Models.Search.SearchPageViewModel

@{
    ViewBag.Title = "Search for an employer's gender pay gap report";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Homepage",
                Href = Url.Action("Index", "Homepage")
            },
            new CrumbViewModel
            {
                Text = "Search and compare",
            }
        };
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<partial name="../ViewReports/ComparisonBasketNew"/>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds-from-desktop">
            
        <h1 class="govuk-heading-xl govuk-!-margin-bottom-6">
            Search by employer name
            <br/>
            <span class="govuk-!-font-size-27" style="display: inline-block;">
                or filter by sector or number of employees
            </span>
        </h1>
        
        <div class="govuk-form-group govuk-!-margin-bottom-3">
            <label class="govuk-label" for="EmployerName">
                Employer name
            </label>

            <div class="gpg-search-box">
                <input type="text"
                       name="EmployerName"
                       id="EmployerName"
                       class="govuk-input"
                       value="@(Model.EmployerName)">
                <input type="submit"
                       value="Search"
                       id="gpg-search-page--search-button"
                       class="gpg-search-button" />
            </div>
        </div>
        
    </div>
</div>

<hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">
        <h2 class="govuk-heading-m">
            Filters
        </h2>
        
        <p class="govuk-body">
            <button type="submit"
                    id="gpg-search-page--clear-all-filters"
                    class="govuk-button govuk-button--secondary govuk-!-margin-bottom-2"
                    data-module="govuk-button"
                    style="width: fit-content;">
                Clear all filters
            </button>
        </p>
        
        <details class="govuk-details" open="@(Model.EmployerSize.Count > 0)">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    <span class="govuk-visually-hidden">
                        Number of
                    </span>
                    Employees
                    <span id="gpg-search-page--filters--number-of-employees--selected">
                        @if (Model.EmployerSize.Count > 0)
                        {
                            @:(@(Model.EmployerSize.Count) selected)
                        }
                    </span>
                </span>
            </summary>
            <div class="govuk-details__text govuk-!-padding-top-0 govuk-!-padding-bottom-0">
                @{
                    OrganisationSizes[] allOrganisationSizes = (OrganisationSizes[]) Enum.GetValues(typeof(OrganisationSizes));
                }
                @await Html.GovUkCheckboxesFor(
                    m => m.EmployerSize,
                    labelOptions: allOrganisationSizes.ToDictionary(
                        orgSize => orgSize,
                        orgSize => new LabelViewModel
                        {
                            Text = orgSize.GetDisplayName()
                        }
                        ),
                    classOptions: new Dictionary<OrganisationSizes, string> {{OrganisationSizes.NotProvided, "gpg-search-page--filter-employerSize--not-provided"}},
                    fieldsetOptions: new FieldsetViewModel
                    {
                        Classes = "gpg-search-page--filter--fieldset",
                        Legend = new LegendViewModel
                        {
                            Text = "Employer size",
                            Classes = "govuk-visually-hidden"
                        }
                    }
                )
            </div>
        </details>        
        
        <details class="govuk-details" open="@(Model.Sector.Count > 0)">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    Sector
                    <span id="gpg-search-page--filters--sector--selected">
                        @if (Model.Sector.Count > 0)
                        {
                            @:(@(Model.Sector.Count) selected)
                        }
                    </span>
                </span>
            </summary>
            <div class="govuk-details__text govuk-!-padding-top-0 govuk-!-padding-bottom-0">
                @await Html.GovUkCheckboxesFromStringsFor(
                    m => m.Sector,
                    checkboxOptions: Model.PossibleSectors.OrderBy(sicSection => sicSection.Description).ToDictionary(
                        sicSection => sicSection.SicSectionId,
                        sicSection => new LabelViewModel
                        {
                            Text = sicSection.Description
                        }
                        ),
                    fieldsetOptions: new FieldsetViewModel
                    {
                        Classes = "gpg-search-page--filter--fieldset",
                        Legend = new LegendViewModel
                        {
                            Text = "Sector",
                            Classes = "govuk-visually-hidden"
                        }
                    }
                )
            </div>
        </details>        
        
        <details class="govuk-details" open="@(Model.ReportedLateYear.Count > 0)">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    Reported late
                    <span id="gpg-search-page--filters--reported-late-years--selected">
                        @if (Model.ReportedLateYear.Count > 0)
                        {
                            @:(@(Model.ReportedLateYear.Count) selected)
                        }
                    </span>
                </span>
            </summary>
            <div class="govuk-details__text govuk-!-padding-top-0 govuk-!-padding-bottom-0">
                @await Html.GovUkCheckboxesFromStringsFor(
                    m => m.ReportedLateYear,
                    checkboxOptions: Model.PossibleReportedLateYears.ToDictionary(
                        year => year.ToString(),
                        year => new LabelViewModel
                        {
                            Text = ReportingYearsHelper.FormatYearAsReportingPeriod(year)
                        }
                        ),
                    fieldsetOptions: new FieldsetViewModel
                    {
                        Classes = "gpg-search-page--filter--fieldset",
                        Legend = new LegendViewModel
                        {
                            Text = "Years where the employer has reported late",
                            Classes = "govuk-visually-hidden"
                        }
                    }
                )
            </div>
        </details>        
    </div>
    
    <div class="govuk-grid-column-two-thirds">
        <h2 class="govuk-heading-m">
            Search results
        </h2>
        
        @{
            // Order By is only allowed when the search box is used
            // If the user is just using filters (with no search term) the results are always ordered alphabetically
            bool orderAlphabetically = (Model.OrderBy == "alphabetically") && !string.IsNullOrWhiteSpace(Model.EmployerName);
        }
        <fieldset id="gpg-search-page--order-by"
                  class="govuk-fieldset"
                  style="@(string.IsNullOrWhiteSpace(Model.EmployerName) ? "display: none;" : "")">
            <div class="govuk-radios govuk-radios--small govuk-radios--inline">
                <div class="govuk-radios__item" style="padding-left: 0;">
                    <legend class="govuk-body govuk-!-font-weight-bold" style="padding-top: 7px;">
                        Order:
                    </legend>
                </div>
                <div class="govuk-radios__item" style="margin-right: 0;">
                    <input type="radio"
                           name="OrderBy"
                           value="relevance"
                           id="gpg-search-page--order-by--relevance"
                           class="govuk-radios__input"
                           checked="@(!orderAlphabetically)">
                    <label for="gpg-search-page--order-by--relevance"
                           class="govuk-label govuk-radios__label">
                        By relevance
                    </label>
                </div>
                <div class="govuk-radios__item" style="margin-right: 0;">
                    <input type="radio"
                           name="OrderBy"
                           value="alphabetically"
                           id="gpg-search-page--order-by--alphabetically"
                           class="govuk-radios__input"
                           checked="@(orderAlphabetically)">
                    <label for="gpg-search-page--order-by--alphabetically"
                           class="govuk-label govuk-radios__label">
                        Alphabetically
                    </label>
                </div>
            </div>
        </fieldset>
        
        <p class="govuk-body"
           id="gpg-search-page--loading"
           aria-live="assertive">
            Loading search results
        </p>
        
        <p class="govuk-body"
           id="gpg-search-page--results-info"
           aria-live="assertive"
           style="display: none;">
            <span id="gpg-search-page--results-info--number-of-results" class="govuk-!-font-size-48 govuk-!-font-weight-bold"></span>
            <span id="gpg-search-page--results-info--employer-employers"></span>
            <span id="gpg-search-page--results-info--containing">
                containing
                <span class="govuk-!-font-weight-bold" id="gpg-search-page--results-info--containing-search-term"></span>
            </span>
        </p>
        
        <div id="gpg-search-page--results-info--no-results"
             style="display: none;">
            <p class="govuk-body">
                Try searching again. Check:
            </p>
            <ul class="govuk-list govuk-list--bullet">
                <li>
                    your spelling
                </li>
                <li>
                    the employer name (sometimes the commonly known employer name is different to their registered name)
                </li>
            </ul>
            <p class="govuk-body">
                You may not find the data you are looking for because:
            </p>
            <ul class="govuk-list govuk-list--bullet">
                <li>
                    only employers with a headcount of 250 or more on their snapshot date are required to submit their gender pay gap information
                </li>
                <li>
                    the employer may have reported their gender pay gap information under a different registered name
                </li>
                <li>
                    the employer may not have submitted their gender pay gap information yet.
                    Most public authority employers have a reporting deadline of 30 March, and
                    private, voluntary and all other public authority employers have a reporting deadline of 4 April.
                </li>
            </ul>
        </div>
        
        <div id="gpg-search-page--results"></div>
    </div>
</div>

<script>
    window.addEventListener("DOMContentLoaded", () => {        
        const NUMBER_OF_SEARCH_RESULTS_PER_TABLE = 100;
        
        const aborter = (() => {
            const abortControllers = [];
            
            return {
                abortPreviousFetchesAndGetNewAbortSignal: () => {
                    while(abortControllers.length > 0) {
                        const abortController = abortControllers.pop();
                        abortController.abort();
                    }
                    
                    const abortController = new AbortController();
                    abortControllers.push(abortController);
                    return abortController.signal;
                }
            };
        })();
        
        const searchResultsIdGenerator = (() => {
            let currentSearchResultsId = 0;
            return {
                getNextId: () => {
                    currentSearchResultsId++;
                    return currentSearchResultsId
                },
               isCurrentId: (id) => id === currentSearchResultsId
            }
        })();
        
        
        wireUpEventListeners();
        updatePage();
        
        function wireUpEventListeners() {
            document.getElementById('EmployerName').addEventListener("keyup", event => { if (event.key === "Enter") { updatePage(); } } );
            document.getElementById('gpg-search-page--search-button').addEventListener("click", updatePage );
            document.getElementById('gpg-search-page--clear-all-filters').addEventListener("click", clearAllFilters);        
            
            getInputs('EmployerSize').forEach((checkbox) => { checkbox.addEventListener("change", updatePage ); });
            getInputs('Sector').forEach((checkbox) => { checkbox.addEventListener("change", updatePage ); });
            getInputs('ReportedLateYear').forEach((checkbox) => { checkbox.addEventListener("change", updatePage ); });
            getInputs('OrderBy').forEach((radio) => { radio.addEventListener("change", updatePage ); });
        }
        
        function getInputs(checkboxName) {
            return document.querySelectorAll(`input[name='${checkboxName}']`);
        }
        function getCheckedInputs(checkboxName) {
            return document.querySelectorAll(`input[name='${checkboxName}']:checked`);
        }
        
        function clearAllFilters() {
            getInputs('EmployerSize').forEach((checkbox) => { checkbox.checked = false; });
            getInputs('Sector').forEach((checkbox) => { checkbox.checked = false; });
            getInputs('ReportedLateYear').forEach((checkbox) => { checkbox.checked = false; });
            document.getElementById('gpg-search-page--order-by--relevance').checked = true;
            
            updatePage();
        }
        
        function updatePage() {
            updateSelectedCount('EmployerSize', 'gpg-search-page--filters--number-of-employees--selected');
            updateSelectedCount('Sector', 'gpg-search-page--filters--sector--selected');
            updateSelectedCount('ReportedLateYear', 'gpg-search-page--filters--reported-late-years--selected');
            
            updateOrderByRadiosVisibility(document.getElementById('EmployerName').value);
            
            const urlQuery = getPageUrlQuery();
            setPageUrl(urlQuery);
            hideCurrentSearchResults();
            loadSearchResults(urlQuery);
        }
        
        function updateSelectedCount(checkboxName, numberSelectedId) {
            const numberSelected = getCheckedInputs(checkboxName).length;
            document.getElementById(numberSelectedId).innerText = (numberSelected ? `(${numberSelected} selected)` : '');
        }
        
        function getPageUrlQuery() {
            function addQueryParametersForSearch() {
                const searchBoxText = document.getElementById('EmployerName').value;
                if (searchBoxText != null && searchBoxText.trim() !== '') {
                    queryParameters.push(`EmployerName=${searchBoxText}`);                    
                }
            }
            function addQueryParametersForCheckboxes(checkboxName) {
                getCheckedInputs(checkboxName).forEach((checkboxElement) => {
                    queryParameters.push(`${checkboxName}=${checkboxElement.value}`);
                });
            }
            function addQueryParameterForOrderBy() {
                const searchBoxText = document.getElementById('EmployerName').value;
                if (document.getElementById('gpg-search-page--order-by--alphabetically').checked &&
                    searchBoxText != null && searchBoxText.trim() !== '') {
                    // Order By is only allowed when the search box is used
                    // If the user is just using filters (with no search term) the results are always ordered alphabetically
                    queryParameters.push('OrderBy=alphabetically');
                }
            }
            
            const queryParameters = [];
            addQueryParametersForSearch();
            addQueryParametersForCheckboxes('EmployerSize');
            addQueryParametersForCheckboxes('Sector');
            addQueryParametersForCheckboxes('ReportedLateYear');
            addQueryParameterForOrderBy();
            const urlQuery = queryParameters.length > 0 ? ('?' + queryParameters.join('&')) : '';
            return urlQuery;
        }
        
        function setPageUrl(urlQuery) {
            const newUrl = `${window.location.pathname}${urlQuery}`;
            window.history.replaceState(null, '', newUrl);
        }
        
        async function loadSearchResults(urlQuery, page = 0) {
            const searchApiPath = '@(Url.Action("SearchApi", "Search"))';
            const searchResultsId = searchResultsIdGenerator.getNextId();
            
            try {
                const MIN_LOADING_DELAY_MILLISECONDS = 400;
                const fetchStartTime = Date.now();
                
                const urlQueryIncludingPage = urlQuery ? `${urlQuery}&Page=${page}` : `${urlQuery}?Page=${page}`;
                const response = await fetch(`${searchApiPath}${urlQueryIncludingPage}`, { signal: aborter.abortPreviousFetchesAndGetNewAbortSignal() });
                if (response.ok) {
                    const json = await response.json();
                    if (searchResultsIdGenerator.isCurrentId(searchResultsId)) {
                        const fetchEndTime = Date.now();
                        const fetchTimeTaken = fetchEndTime - fetchStartTime;
                        if (page > 0 || fetchTimeTaken > MIN_LOADING_DELAY_MILLISECONDS) {
                            displaySearchResults(json, urlQuery);
                        }
                        else {
                            window.setTimeout(() => displaySearchResults(json, urlQuery), MIN_LOADING_DELAY_MILLISECONDS - fetchTimeTaken);
                        }
                    }
                }
                else {
                    console.error(`Response status: ${response.status}`);
                }
            } catch (error) {
                console.error(error.message);
            }
        }
        
        function hideCurrentSearchResults() {
            document.getElementById('gpg-search-page--loading').style.display = 'block';
            document.getElementById('gpg-search-page--results-info').style.display = 'none';
            document.getElementById('gpg-search-page--results-info--no-results').style.display = 'none';
            document.getElementById('gpg-search-page--results').style.display = 'none';
        }
        
        function displaySearchResults(json, urlQuery) {
            if (json.SearchParameters.Page === 0) {
                document.getElementById('gpg-search-page--loading').style.display = 'none';
                
                updateOrderByRadiosVisibility(json.SearchParameters.EmployerName);
                
                document.getElementById('gpg-search-page--results-info--number-of-results').innerText = json.NumberOfEmployers.toLocaleString();
                document.getElementById('gpg-search-page--results-info--employer-employers').innerText = json.NumberOfEmployers === 1 ? 'employer' : 'employers';
                document.getElementById('gpg-search-page--results-info--containing-search-term').innerText = json.SearchParameters.EmployerName;
                document.getElementById('gpg-search-page--results-info--containing').style.display = json.SearchParameters.EmployerName ? 'inline' : 'none';
                document.getElementById('gpg-search-page--results-info').style.display = 'block';
                
                document.getElementById('gpg-search-page--results-info--no-results').style.display = json.NumberOfEmployers > 0 ? 'none' : 'block';
                
                document.getElementById('gpg-search-page--results').style.display = 'block';
                document.getElementById('gpg-search-page--results').innerHTML = '';
            }
            
            addSearchResultsForPage(json, urlQuery);
        }
        
        function updateOrderByRadiosVisibility(employerName) {
            const employerNameIsEmpty = (employerName == null || employerName.trim() === '');
            
            const orderByRadios = document.getElementById('gpg-search-page--order-by');
            orderByRadios.style.display = employerNameIsEmpty ? 'none' : 'block';
        }
        
        function addSearchResultsForPage(json, urlQuery) {
            if (json.Employers.length > 0) {                
                createTableOfResultsForThisBlock(json);
                
                const moreResults = json.NumberOfEmployers > ((json.SearchParameters.Page + 1) * NUMBER_OF_SEARCH_RESULTS_PER_TABLE);
                if (moreResults) {
                    createMoreButton(json, urlQuery);
                }
            }
        }
        
        function createTableOfResultsForThisBlock(json) {
            function createThWithTextAndAddToTr(tr, th_text) {
                const th = document.createElement('th');
                th.innerText = th_text;
                th.scope = 'col';
                tr.appendChild(th);
            }
            function createThWithLinkToEmployerAndAddToTr(tr, employerId, employerName) {
                const th = document.createElement('th');
                th.scope = 'row';
                tr.appendChild(th);
                
                const link = document.createElement('a');
                const employerPagePath = '@(Url.Action("Employer", "ViewReports", new { organisationId = 99999 }))'.replace('99999', '');
                link.href = `${employerPagePath}${employerId}`;
                link.innerText = employerName;
                th.appendChild(link);
            }
            function createTdWithTextAndAddToTr(tr, td_text, textIfEmpty) {
                const td = document.createElement('td');
                if (td_text) {
                    td.innerText = td_text;                    
                }
                else {
                    td.innerText = textIfEmpty;
                    td.classList.add('gpg-search-results--empty-cell')
                }
                tr.appendChild(td);
            }
            function createTdWithCompareButton(tr, org_id, org_name) {
                const orgIsInCompareList = comparedOrgIds.includes(org_id);
                
                const td = document.createElement('td');
                
                const compare_button = document.createElement('button');
                compare_button.classList.add(orgIsInCompareList ? 'gpg-search-results--remove-button' : 'gpg-search-results--add-button');
                
                const button_span_action = document.createElement('span');
                button_span_action.innerText = orgIsInCompareList ? 'Remove from comparison' : 'Add to comparison';
                compare_button.appendChild(button_span_action);
                
                const button_span_org_name = document.createElement('span');
                button_span_org_name.innerText = ` ${org_name}`;
                compare_button.appendChild(button_span_org_name);
                
                compare_button.addEventListener('click', () => { addOrRemoveCompareButtonClicked(compare_button, button_span_action, org_id) });
                td.appendChild(compare_button);
                
                tr.appendChild(td);
            }
            
            const comparedOrgIds = getComparedOrgIdsFromCookie();
            
            const resultsSection = document.getElementById('gpg-search-page--results');
            
            const results_new_table = document.createElement('table');
            
            const results_new_caption = document.createElement('caption');
            const firstResultIndex = json.SearchParameters.Page * NUMBER_OF_SEARCH_RESULTS_PER_TABLE + 1;
            const lastResultIndex = Math.min(json.NumberOfEmployers, (json.SearchParameters.Page * NUMBER_OF_SEARCH_RESULTS_PER_TABLE) + json.Employers.length);
            results_new_caption.innerText = `Search results ${firstResultIndex} to ${lastResultIndex}`;
            results_new_table.appendChild(results_new_caption);
            
            const results_new_thead = document.createElement('thead');
            const results_new_thead_tr = document.createElement('tr');
            createThWithTextAndAddToTr(results_new_thead_tr, 'Employer name');
            createThWithTextAndAddToTr(results_new_thead_tr, 'Previous name');
            createThWithTextAndAddToTr(results_new_thead_tr, 'Address');
            createThWithTextAndAddToTr(results_new_thead_tr, 'Sector');
            createThWithTextAndAddToTr(results_new_thead_tr, 'Action');
            results_new_thead.appendChild(results_new_thead_tr);
            results_new_table.appendChild(results_new_thead);
            
            const results_new_tbody = document.createElement('tbody');
            json.Employers.forEach((employer) => {
                const results_new_tbody_tr = document.createElement('tr');
                createThWithLinkToEmployerAndAddToTr(results_new_tbody_tr, employer.Id, employer.Name);
                createTdWithTextAndAddToTr(results_new_tbody_tr, employer.PreviousName, 'No previous name');
                createTdWithTextAndAddToTr(results_new_tbody_tr, employer.Address, 'No address');
                const sectorsNames = employer.Sectors.map(sectorId => json.Sectors[sectorId]).join('; ').replaceAll('\n','').replaceAll('\r','');
                createTdWithTextAndAddToTr(results_new_tbody_tr, sectorsNames, 'No sector');
                createTdWithCompareButton(results_new_tbody_tr, employer.Id, employer.Name);
                results_new_tbody.appendChild(results_new_tbody_tr);                
            });
            results_new_table.appendChild(results_new_tbody);
            
            resultsSection.appendChild(results_new_table);
        }
        
        function getComparedOrgIdsFromCookie() {
            const compareCookies = document.cookie.split(';')
                .filter(cookie => cookie.trim().startsWith('compare='))
                .map(cookie => cookie.trim().split('=')[1]);
            const compareCookieValue = compareCookies.length === 1 ? compareCookies[0] : '';
            const organisationIdsStrings = compareCookieValue.length > 0 ? compareCookieValue.split(encodeURIComponent(',')) : [];
            const organisationIds = organisationIdsStrings.map(idstr => Number.parseInt(idstr));
            return organisationIds;
        }
        
        function createMoreButton(json, urlQuery) {            
            const resultsSection = document.getElementById('gpg-search-page--results');
            
            const more_button = document.createElement('button');
            const nextBlockFirstResultIndex = ((json.SearchParameters.Page + 1) * NUMBER_OF_SEARCH_RESULTS_PER_TABLE) + 1;
            const nextBlockLastResultIndex = Math.min(json.NumberOfEmployers, (json.SearchParameters.Page + 2) * NUMBER_OF_SEARCH_RESULTS_PER_TABLE);
            more_button.innerText = `Show search results ${nextBlockFirstResultIndex} to ${nextBlockLastResultIndex}`;
            more_button.addEventListener('click', () => {
                resultsSection.removeChild(more_button);
                loadSearchResults(urlQuery, json.SearchParameters.Page + 1);
            })
            resultsSection.appendChild(more_button);
        }
        
        async function addOrRemoveCompareButtonClicked(compare_button, button_span_action, org_id) {
            function updateCompareButton(orgIsInCompareList) {
                button_span_action.innerText = orgIsInCompareList ? 'Remove from comparison' : 'Add to comparison';
                compare_button.classList.remove(orgIsInCompareList ? 'gpg-search-results--add-button' : 'gpg-search-results--remove-button');
                compare_button.classList.add(orgIsInCompareList ? 'gpg-search-results--remove-button' : 'gpg-search-results--add-button');
            }
            function updateComparisonBasket(numberOfComparedOrgs) {
                document.getElementById('compare-employers-notification-banner').style.display = numberOfComparedOrgs > 0 ? 'block' : 'none';
                const numberOfEmployersText = `${numberOfComparedOrgs} ${numberOfComparedOrgs === 1 ? 'employer' : 'employers'}`;
                document.getElementById('compare-employers-notification-banner--number-of-employees').innerText = numberOfEmployersText;
            }
            
            // Do what the button SAYS ("Add" or "Remove"), regardless of whether the org is currently in the compare basket
            const isAddButton = compare_button.classList.contains('gpg-search-results--add-button');
            
            try {
                const addOrRemovePath = isAddButton ? '/compare-employers/add-js/' : '/compare-employers/remove-js/';
                const response = await fetch(`${addOrRemovePath}${org_id}`);
                if (response.ok) {
                    const comparedOrgIds = getComparedOrgIdsFromCookie(); // Re-check cookie
                    const orgIsInCompareList = comparedOrgIds.includes(org_id);
                    updateCompareButton(orgIsInCompareList);
                    updateComparisonBasket(comparedOrgIds.length);
                }
                else {
                    console.error(`Response status: ${response.status}`);
                }
            } catch (error) {
                console.error(error.message);
            }
        }
        
    });
</script>
