@using GenderPayGap.Core.Classes.Downloadable
@using GenderPayGap.Core.Interfaces.Downloadable
@model IEnumerable<GenderPayGap.Core.Interfaces.Downloadable.IDownloadableItem>
@{
    object logType = ViewData["logType"];
    string actionName = ViewData["actionName"].ToString();

    List<string> types = Model
        .Where(d => d.GetType() == typeof(DownloadableFile))
        .Select(x => ((DownloadableFile) x).Type)
        .Distinct()
        .ToList();
}

<div class="breadcrumbs dynamic-content default-content" style="display: block;">
    <ol>
        <li style="display: block; padding-top: 0.75em; padding-bottom: 0;">
            &lt;
            @Html.ActionLink("Back to Administration home", "Home", "Admin")
        </li>
    </ol>
</div>

<div class="grid-row">
    <div class="column-full">
        <div style="float:right;font-size:smaller;">
            <span>
                <a href="@Url.Action(actionName, new {v = Guid.NewGuid().ToShortString()})" title="Show more recent content"><span class="visually-hidden">Show more recent content </span>@VirtualDateTime.Now.ToString("d MMM HH:mm")</a>
            </span>
        </div>
        <h1 class="heading-large" style="margin-top: 0.3em;">
            <span id="companyname">Administration</span>
            <span class="heading-secondary">@logType Logs</span>
        </h1>

        @foreach (IDownloadableItem directoryInfo in Model
            .Where(d => d.GetType() == typeof(DownloadableDirectory)))
        {
            @if (directoryInfo.Filepath.ToLower() == "logs")
            {
                continue;
            } // do not print the root (parent is 'logs')
            <div>Directory <a href="@Url.Action(actionName, new {fp = directoryInfo.Filepath})">@directoryInfo.Name</a></div>
        }

        <br/>

        <table class="download-table">
            <thead>
            <tr>
                <th scope="col">Description</th>
                <th scope="col">File</th>
            </tr>
            </thead>
            <tbody>

            @if (!types.Any())
            {
                <tr>
                    <td colspan="2">No files found in this directory</td>
                </tr>
            }

            @foreach (string type in types)
            {
                IOrderedEnumerable<IDownloadableItem> downloads = Model
                    .Where(d => d.GetType() == typeof(DownloadableFile))
                    .Where(f => ((DownloadableFile) f).Type.EqualsI(type))
                    .OrderByDescending(x => ((DownloadableFile) x).Modified);

                <tr>
                    <td colspan="2">
                        <b>@type Downloads</b>
                    </td>
                </tr>
                if (!downloads.Any())
                {
                    <tr>
                        <td colspan="2">No @type.ToLower() found</td>
                    </tr>
                }
                else
                {
                    foreach (DownloadableFile download in downloads)
                    {
                        <tr>
                            <td>
                                <a href="@Url.Action("Read", "Admin", new {filePath = download.Filepath})">
                                    <b>@download.Title</b>
                                </a><br/>@download.Description</td>
                            <td>
                                <a download="true" href="@Url.Action("Download", "Admin", new {filePath = download.Filepath})" target="_blank">@download.Name</a>
                            </td>
                        </tr>
                    }
                }
            }

            </tbody>
        </table>

    </div>
</div>