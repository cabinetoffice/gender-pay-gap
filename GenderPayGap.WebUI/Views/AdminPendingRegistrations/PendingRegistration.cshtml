@using GenderPayGap.Core
@using GenderPayGap.Database
@using GenderPayGap.WebUI.Helpers
@using GenderPayGap.WebUI.Models.AddOrganisation
@using GenderPayGap.WebUI.Models.Admin
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model GenderPayGap.WebUI.Models.Admin.AdminPendingRegistrationViewModel

@{
    ViewBag.Title = "Review pending registration request - Gender pay gap service";

    List<User> otherUsers = Model.UserOrganisation.Organisation.UserOrganisations
        .Except(new[] {Model.UserOrganisation})
        .Where(uo => uo.HasBeenActivated())
        .Where(uo => uo.User.Status == UserStatuses.Active)
        .Select(uo => uo.User)
        .ToList();
    
    List<UserOrganisation> otherRegistrations = Model.UserOrganisation.User.UserOrganisations
        .Except(new[] {Model.UserOrganisation})
        .OrderBy(uo => uo.Created)
        .ToList();
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Admin",
                Href = Url.Action("AdminHomePage", "AdminHomepage")
            },
            new CrumbViewModel
            {
                Text = "Pending Registrations",
                Href = Url.Action("PendingRegistrations", "AdminPendingRegistrations")
            },
            new CrumbViewModel
            {
                Text = $"{Model.UserOrganisation.User.Firstname} {Model.UserOrganisation.User.Lastname} ({Model.UserOrganisation.User.JobTitle}) - {Model.UserOrganisation.Organisation.OrganisationName}"
            }
        };
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        @(await Html.GovUkErrorSummary(ViewData.ModelState, new[]
        {
            nameof(AdminPendingRegistrationViewModel.ApproveOrReject),
            nameof(AdminPendingRegistrationViewModel.RejectionReason),
        }))

        <span class="govuk-caption-xl">Administration</span>
        <h1 class="govuk-heading-xl">
            Review registration request
        </h1>

        <h2 class="govuk-heading-l govuk-!-margin-bottom-2">
            User registering to report
        </h2>
        
        <p class="govuk-body govuk-!-margin-bottom-2">
            <a href="@Url.Action("ViewUser", "AdminViewUser", new {id = Model.UserOrganisation.UserId})"
               class="govuk-link">
                View full user details
            </a>
        </p>
        
        <table class="govuk-table">
            <tbody class="govuk-table__body">
                <tr class="govuk-table__row">
                    <th class="govuk-table__header" scope="row">
                        Email
                    </th>
                    <td class="govuk-table__cell">
                        @Model.UserOrganisation.User.EmailAddress
                        <br/>
                        <span class="govuk-hint govuk-!-font-size-16 govuk-!-margin-bottom-0">
                            @(Model.UserOrganisation.User.EmailVerifiedDate.HasValue ? "✅ Verified" : "❌ NOT verified")
                            @if (otherUsers.Count > 0)
                            {
                                <br/>
                                @(otherUsers.All(otherUser => EmailAddressHelper.DomainNameMatches(otherUser.EmailAddress, Model.UserOrganisation.User.EmailAddress))
                                    ? "✅ Domain name matches existing users"
                                    : "❌ Domain name doesn't match all existing users")
                            }
                        </span>
                    </td>
                    <td class="govuk-table__cell">
                        <button class="govuk-button govuk-button--secondary govuk-!-margin-bottom-0 copyToClipboardButton"
                                data-module="govuk-button"
                                id="button-text-email-address"
                                onclick="copyToClipboard('email-address')">
                            Copy
                        </button>
                        <div id="value-email-address" style="display: none;">
                            @Model.UserOrganisation.User.EmailAddress
                        </div>
                        <script>
                            function copyToClipboard(id) {
                                const valueElement = document.getElementById('value-' + id);
                                const buttonTextElement = document.getElementById('button-text-' + id);
                                const valueToCopy = valueElement.innerText.trim();
                                navigator.clipboard
                                    .writeText(valueToCopy)
                                    .then(function () {
                                        buttonTextElement.innerText = 'Copied';
                                        window.setTimeout(() => { buttonTextElement.innerText = 'Copy'; }, 2000);
                                    }, function () {
                                        buttonTextElement.innerText = 'Copy failed';
                                    });
                            }
                            if (navigator.clipboard && navigator.clipboard.writeText) {
                                document.querySelectorAll(".copyToClipboardButton").forEach(el => el.style.display = 'block');
                            }
                        </script>
                        <style>
                            .copyToClipboardButton {
                                display: none;
                            }
                        </style>
                    </td>
                </tr>
                
                <tr class="govuk-table__row">
                    <th class="govuk-table__header" scope="row">
                        Name
                    </th>
                    <td colspan="2" class="govuk-table__cell">
                        @Model.UserOrganisation.User.Firstname @Model.UserOrganisation.User.Lastname (@Model.UserOrganisation.User.JobTitle)
                        <br/>
                        <span class="govuk-hint govuk-!-font-size-16 govuk-!-margin-bottom-0" style="display: inline-block; line-height: 1 !important;">
                            Note: The service doesn't verify users' names
                        </span>
                    </td>
                </tr>

                <tr class="govuk-table__row">
                    <th class="govuk-table__header" scope="row">
                        Telephone
                    </th>
                    <td colspan="2" class="govuk-table__cell">
                        @(Model.UserOrganisation.User.ContactPhoneNumber ?? "(not supplied)")
                        <br/>
                        <span class="govuk-hint govuk-!-font-size-16 govuk-!-margin-bottom-0" style="display: inline-block; line-height: 1 !important;">
                            Note: The service doesn't verify users' telephone numbers
                        </span>
                    </td>
                </tr>
                
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header" style="max-width: 150px;">This user's other organisations</th>
                    <td class="govuk-table__cell">
                        @if (otherRegistrations.Count > 0)
                        {
                            <ul class="govuk-list govuk-!-margin-bottom-0">
                                @foreach (UserOrganisation otherRegistration in otherRegistrations.Take(3))
                                {
                                    @(await Html.PartialAsync("Sections/PendingRegistrationOtherRegistration", otherRegistration))
                                }
                            </ul>
                            
                            @if (otherRegistrations.Count > 3)
                            {
                                <details class="govuk-details govuk-!-margin-bottom-0" data-module="govuk-details">
                                    <summary class="govuk-details__summary">
                                        <span class="govuk-details__summary-text">
                                            Show @(otherRegistrations.Count - 3) more
                                        </span>
                                    </summary>
                                    <div class="govuk-details__text govuk-!-padding-left-0" style="border-left: none;">
                                        <ul class="govuk-list govuk-!-margin-bottom-0">
                                            @foreach (UserOrganisation otherRegistration in otherRegistrations.Skip(3))
                                            {
                                                @(await Html.PartialAsync("Sections/PendingRegistrationOtherRegistration", otherRegistration))
                                            }
                                        </ul>
                                    </div>
                                </details>
                            }
                        }
                        else
                        {
                            <span>Not registered to report for any other organisations</span>
                        }
                    </td>
                </tr>
            </tbody>
        </table>

        <h2 class="govuk-heading-l govuk-!-margin-top-8 govuk-!-margin-bottom-2">
            Organisation being registered
        </h2>
        
        <p class="govuk-body govuk-!-margin-bottom-2">
            <a href="@Url.Action("ViewOrganisation", "AdminViewOrganisation", new {id = Model.UserOrganisation.OrganisationId})"
               class="govuk-link">
                View full organisation details
            </a>
        </p>

        @if (Model.UserOrganisation.Organisation.Status == OrganisationStatuses.Pending)
        {
            <div class="govuk-warning-text govuk-!-margin-top-3 govuk-!-margin-bottom-2">
                <span class="govuk-warning-text__icon govuk-!-margin-top-1" aria-hidden="true">!</span>
                <strong class="govuk-warning-text__text">
                    <span class="govuk-warning-text__assistive">Warning</span>
                    <span class="govuk-!-margin-bottom-1" style="display: block;">
                        New organisation:
                    </span>
                    <span class="govuk-!-font-weight-regular">
                        This organisation has been
                    </span>
                    manually registered by this user
                </strong>
            </div>
        }
        else
        {
            <div class="govuk-inset-text govuk-!-margin-top-4 govuk-!-margin-bottom-3">
                <b>Existing organisation:</b>
                <br/>
                This organisation <b>already exists in the service</b>
            </div>
        }

    <table class="govuk-table">
            <tbody class="govuk-table__body">
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header">Name</th>
                    <td class="govuk-table__cell">
                        @(Model.UserOrganisation.Organisation.OrganisationName)
                    </td>
                </tr>
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header">Status</th>
                    <td class="govuk-table__cell">
                        @(Model.UserOrganisation.Organisation.Status)
                        <br/>
                        <span class="govuk-hint govuk-!-font-size-16 govuk-!-margin-bottom-0" style="display: inline-block; line-height: 1 !important;">
                            This organisation
                            @if (Model.UserOrganisation.Organisation.Status == OrganisationStatuses.Pending)
                            {
                                <b style="color: #000;">has been manually registered by this user</b>
                            }
                            else
                            {
                                <b style="color: #000;">already exists in the service</b>
                            }
                        </span>
                    </td>
                </tr>
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header">Sector</th>
                    <td class="govuk-table__cell">
                        @(Model.UserOrganisation.Organisation.SectorType)
                    </td>
                </tr>
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header">Address</th>
                    <td class="govuk-table__cell">
                        @foreach (string addressLine in Model.UserOrganisation.Organisation.GetLatestAddress().GetAddressLines())
                        {
                            @(addressLine)<br/>
                        }
                    </td>
                </tr>
                @if (Model.UserOrganisation.Organisation.SectorType == SectorTypes.Private)
                {
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">Company Number</th>
                        <td class="govuk-table__cell">@(Model.UserOrganisation.Organisation.CompanyNumber)</td>
                    </tr>

                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">SIC codes</th>
                        <td class="govuk-table__cell">
                            @foreach (OrganisationSicCode organisationSicCode in Model.UserOrganisation.Organisation.OrganisationSicCodes.Where(osc => !osc.IsRetired()))
                            {
                                <b>@(organisationSicCode.SicCode.SicCodeId)</b>
                                @(organisationSicCode.SicCode.Description)
                                <br/>
                                <span class="govuk-body-s">
                                    part of: @(organisationSicCode.SicCode.SicSection.Description)
                                </span>
                                <br/>
                            }
                        </td>
                    </tr>                
                }
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header">Existing users</th>
                    <td class="govuk-table__cell">
                        @if (otherUsers.Count > 0)
                        {
                            <ul class="govuk-list govuk-!-margin-bottom-0">
                                @foreach (User otherUser in otherUsers)
                                {
                                    <li class="govuk-!-margin-bottom-2">
                                        <a href="@Url.Action("ViewUser", "AdminViewUser", new {id = otherUser.UserId})"
                                           class="govuk-link">
                                            @(otherUser.Fullname)
                                        </a>
                                        <br/>
                                        @(otherUser.EmailAddress)
                                        <br/>
                                        <span class="govuk-hint govuk-!-font-size-16 govuk-!-margin-bottom-0">
                                            @(EmailAddressHelper.DomainNameMatches(otherUser.EmailAddress, Model.UserOrganisation.User.EmailAddress)
                                                ? "✅ Domain name matches the new user"
                                                : "❌ Domain name doesn't match the new user")
                                        </span>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span>No existing users</span>
                        }
                    </td>
                </tr>
            </tbody>
        </table>

    </div>
</div>

@if (Model.UserOrganisation.Organisation.Status == OrganisationStatuses.Pending)
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">

            <h2 class="govuk-heading-l govuk-!-margin-top-4 govuk-!-margin-bottom-0">
                Similar organisations
            </h2>
            
        </div>
    </div>
    
    <div class="govuk-grid-row govuk-!-margin-bottom-8">
        <div class="govuk-grid-column-one-half">

            <h3 class="govuk-heading-m govuk-!-margin-top-2">
                From our database
            </h3>
            
            @if (Model.SimilarOrganisationsFromOurDatabase.Count > 0)
            {
                <ul class="govuk-list add-organisation-search-list govuk-!-margin-bottom-0">
                    @foreach (AddOrganisationSearchResult organisation in Model.SimilarOrganisationsFromOurDatabase.Take(3))
                    {
                        @(await Html.PartialAsync("Sections/PendingRegistrationSimilarOrganisation", organisation))
                    }
                </ul>
                
                @if (Model.SimilarOrganisationsFromOurDatabase.Count > 3)
                {
                    <details class="govuk-details govuk-!-margin-bottom-0" data-module="govuk-details">
                        <summary class="govuk-details__summary">
                            <span class="govuk-details__summary-text">
                                Show @(Model.SimilarOrganisationsFromOurDatabase.Count - 3) more
                            </span>
                        </summary>
                        <div class="govuk-details__text govuk-!-padding-left-0" style="border-left: none;">
                            <ul class="govuk-list add-organisation-search-list">
                                @foreach (AddOrganisationSearchResult organisation in Model.SimilarOrganisationsFromOurDatabase.Skip(3))
                                {
                                    @(await Html.PartialAsync("Sections/PendingRegistrationSimilarOrganisation", organisation))
                                }
                            </ul>
                        </div>
                    </details>
                }
            }
            else
            {
                <p class="govuk-body">
                    No similar organisations found in our database
                </p>
            }
        </div>
        
        <div class="govuk-grid-column-one-half">

            <h3 class="govuk-heading-m govuk-!-margin-top-2">
                From Companies House
            </h3>
            
            @if (Model.SimilarOrganisationsFromCompaniesHouse.Count > 0)
            {
                <ul class="govuk-list add-organisation-search-list govuk-!-margin-bottom-0">
                    @foreach (AddOrganisationSearchResult organisation in Model.SimilarOrganisationsFromCompaniesHouse.Take(3))
                    {
                        @(await Html.PartialAsync("Sections/PendingRegistrationSimilarOrganisation", organisation))
                    }
                </ul>
                
                @if (Model.SimilarOrganisationsFromCompaniesHouse.Count > 3)
                {
                    <details class="govuk-details govuk-!-margin-bottom-0" data-module="govuk-details">
                        <summary class="govuk-details__summary">
                            <span class="govuk-details__summary-text">
                                Show @(Model.SimilarOrganisationsFromCompaniesHouse.Count - 3) more
                            </span>
                        </summary>
                        <div class="govuk-details__text govuk-!-padding-left-0" style="border-left: none;">
                            <ul class="govuk-list add-organisation-search-list">
                                @foreach (AddOrganisationSearchResult organisation in Model.SimilarOrganisationsFromCompaniesHouse.Skip(3))
                                {
                                    @(await Html.PartialAsync("Sections/PendingRegistrationSimilarOrganisation", organisation))
                                }
                            </ul>
                        </div>
                    </details>
                }
            }
            else
            {
                <p class="govuk-body">
                    No similar organisations found in Companies House
                </p>
            }

        </div>
    </div>
}

<div class="govuk-grid-row govuk-!-margin-top-2">
    <div class="govuk-grid-column-two-thirds">
        
        <form method="POST" action="@Url.Action("PendingRegistrationPost", "AdminPendingRegistrations")">
            @Html.AntiForgeryToken()

            @await Html.GovUkRadiosFor(
                m => m.ApproveOrReject,
                fieldsetOptions: new FieldsetViewModel
                {
                    Legend = new LegendViewModel
                    {
                        Html = @<h2 class="govuk-heading-l govuk-!-margin-bottom-2">
                                   Would you like to approve or reject this registration request?
                               </h2>,
                    },
                    Classes = "govuk-!-margin-bottom-4"
                },
                conditionalOptions: new Dictionary<AdminPendingRegistrationApproveOrReject, Conditional>
                {
                    { AdminPendingRegistrationApproveOrReject.Reject , new Conditional
                    {
                        Html = @<div>
                                   @(await Html.GovUkCharacterCountFor(
                                       m => m.RejectionReason,
                                       labelOptions: new LabelViewModel
                                       {
                                           Text = "Reason for rejection",
                                           Classes = "govuk-label--s"
                                       }
                                   ))
                                </div>
                    }}
                })
            
            <button class="govuk-button govuk-!-margin-bottom-4" data-module="govuk-button"
                    id="original-button" zdisabled="disabled">
                Continue
            </button>
            <button class="govuk-button govuk-button--warning govuk-!-margin-bottom-4" data-module="govuk-button"
                    id="reject-button"
                    style="display: none;">
                Reject registration
            </button>
            <button class="govuk-button govuk-!-margin-bottom-4" data-module="govuk-button"
                    id="approve-button"
                    style="display: none;">
                Confirm and complete registration
            </button>
            <script>
                const fieldName = "@(nameof(AdminPendingRegistrationViewModel.ApproveOrReject))";
                const approveName = "@(nameof(AdminPendingRegistrationApproveOrReject.Approve))";
                const rejectName = "@(nameof(AdminPendingRegistrationApproveOrReject.Reject))";
                
                const approveRadio = document.getElementById(`${fieldName}_${approveName}`);
                const rejectRadio = document.getElementById(`${fieldName}_${rejectName}`);
                
                const originalButton = document.getElementById('original-button');
                const approveButton = document.getElementById('approve-button');
                const rejectButton = document.getElementById('reject-button');
                
                function approveOrRejectClicked() {
                    approveButton.style.display = approveRadio.checked ? 'inline-block' : 'none';
                    rejectButton.style.display = rejectRadio.checked ? 'inline-block' : 'none';
                    originalButton.style.display = !(approveRadio.checked || rejectRadio.checked) ? 'inline-block' : 'none';
                }
                
                approveRadio.addEventListener('change', approveOrRejectClicked);
                rejectRadio.addEventListener('change', approveOrRejectClicked);
                // originalButton.style.display = 'none';
            </script>

            <p class="govuk-body">
                <a href="@Url.Action("PendingRegistrations", "AdminPendingRegistrations")"
                   class="govuk-link">
                    Cancel and return to Pending Registrations page
                </a>
            </p>
            
        </form>
        
    </div>
</div>
