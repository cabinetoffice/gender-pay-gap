@using GenderPayGap.Core.Helpers
@using GenderPayGap.WebUI.Views.Components.StatusMessages
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@model GenderPayGap.WebUI.Models.Report.NewReportFiguresViewModel

@{
    string encryptedOrganisationId = Encryption.EncryptQuerystring(Model.Organisation.OrganisationId.ToString());
    string formattedReportingYears = ReportingYearsHelper.FormatYearAsReportingPeriod(Model.ReportingYear);

    string editOrReportTitle = Model.IsEditingSubmittedReturn
        ? "Edit your gender pay gap"
        : "Report your gender pay gap";

    ViewBag.Title = $"{editOrReportTitle} - reporting year {formattedReportingYears} - {Model.Organisation.OrganisationName} - Gender pay gap service";
    Layout = "~/Views/GovUkFrontend/GovUkFrontendLayout.cshtml";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Your Organisations",
                Href = Url.Action("ManageOrganisationsGet", "ManageOrganisations")
            },
            new CrumbViewModel
            {
                Text = Model.Organisation.OrganisationName,
                Href = Url.Action("ManageOrganisationGet", "ManageOrganisations", new {encryptedOrganisationId = encryptedOrganisationId})
            },
            new CrumbViewModel
            {
                Text = $"{editOrReportTitle} (reporting year {formattedReportingYears})",
                Href = Url.Action("NewReportOverview", "NewReportOverview", new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear})
            },
            new CrumbViewModel
            {
                Text = "Report figures"
            }
        };
    }

    @(Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<form method="post" action="@(Url.Action("NewReportFiguresPost", "NewReportFigures", new { encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear }))">

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            @(Html.AntiForgeryToken())
            @{ await Html.RenderPartialAsync("../Components/StatusMessages/StatusMessages", new StatusMessagesViewModel()); }
            @(Html.GovUkErrorSummary())

            <fieldset class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                    <h1 class="govuk-fieldset__heading">
                        Enter your gender pay gap data for snapshot date @(Model.SnapshotDate.ToString("dd MMMM yyyy"))
                    </h1>
                    
                    <h2 class="govuk-heading-m govuk-!-margin-bottom-8 govuk-!-margin-top-4 govuk-!-font-weight-regular">Reporting as @(Model.Organisation.OrganisationName)</h2>
                </legend>
            </fieldset>
        </div>
    </div>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <p class="govuk-body">For differences in hourly pay and bonus pay, a positive <span aria-hidden="true" aria-label="percentage">%</span> indicates that men in your organisation are paid more than women in your organisation.</p>
            <p class="govuk-body">A negative <span aria-hidden="true" aria-label="percentage">%</span> indicates that men in your organisation are paid less than women in your organisation.</p>

            <p class="govuk-body govuk-!-font-weight-bold">
                Please enter your data to 1 decimal point
            </p>
                
            <fieldset class="govuk-fieldset govuk-!-margin-top-8">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h3 class="govuk-fieldset__heading">Percentage of men and women in each hourly pay quarter</h3>
                </legend>
                            
                @(Html.GovUkCheckboxItemFor(
                    m => m.OptedOutOfReportingPayQuarters,
                    new LabelViewModel
                    {
                        Text = "If any employees go on reduced pay as a result of the Coronavirus Job Retention Scheme "
                               + "(furlough), they would no longer count as 'full-pay relevant employees'. "
                               + "If your organisation had three or fewer full-pay relevant employees on the "
                               + "snapshot date, you can opt-out of providing quarter data by checking this box."
                    },
                    null,
                    null,
                    false,
                    "showOrHidePayQuarters();"
                    ))

                @{
                    var payQuartersDisplay = Model.OptedOutOfReportingPayQuarters ? "none" : "block";
                    <div id="PayQuarters" style="display: @payQuartersDisplay">
                        <h3 class="govuk-heading-s">Upper hourly pay quarter</h3>

                        @(Html.GovUkTextInputFor(
                            m => m.MaleUpperPayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        @(Html.GovUkTextInputFor(
                            m => m.FemaleUpperPayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        <h3 class="govuk-heading-s">Upper middle hourly pay quarter</h3>

                        @(Html.GovUkTextInputFor(
                            m => m.MaleUpperMiddlePayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        @(Html.GovUkTextInputFor(
                            m => m.FemaleUpperMiddlePayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        <h3 class="govuk-heading-s">Lower middle hourly pay quarter</h3>

                        @(Html.GovUkTextInputFor(
                            m => m.MaleLowerMiddlePayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        @(Html.GovUkTextInputFor(
                            m => m.FemaleLowerMiddlePayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        <h3 class="govuk-heading-s">Lower hourly pay quarter</h3>

                        @(Html.GovUkTextInputFor(
                            m => m.MaleLowerPayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))

                        @(Html.GovUkTextInputFor(
                            m => m.FemaleLowerPayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = @<text>
                                           <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                        </text>
                            }
                            ))
                    </div>
                }
            </fieldset>

            <fieldset class="govuk-fieldset govuk-!-margin-top-8">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h3 class="govuk-fieldset__heading">Mean gender pay gap using hourly pay</h3>
                </legend>

                @(Html.GovUkTextInputFor(
                    m => m.DiffMeanHourlyPayPercent,
                    new LabelViewModel {Text = "Enter the difference in mean hourly pay"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = @<text>
                                   <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                </text>
                    }
                    ))

                @(Html.GovUkTextInputFor(
                    m => m.DiffMedianHourlyPercent,
                    new LabelViewModel {Text = "Enter the difference in median hourly pay"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = @<text>
                                   <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                </text>
                    }
                    ))

            </fieldset>

            <fieldset class="govuk-fieldset govuk-!-margin-top-8">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h3 class="govuk-fieldset__heading">Percentage of men and women who received bonus pay</h3>
                </legend>

                @(Html.GovUkTextInputFor(
                    m => m.MaleBonusPayPercent,
                    new LabelViewModel {Text = "Percentage of men who received a bonus"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = @<text>
                                   <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                </text>
                    }
                    ))

                @(Html.GovUkTextInputFor(
                    m => m.FemaleBonusPayPercent,
                    new LabelViewModel {Text = "Percentage of women who received a bonus"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = @<text>
                                   <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                </text>
                    }
                    ))

            </fieldset>

            <fieldset class="govuk-fieldset govuk-!-margin-top-8">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h3 class="govuk-fieldset__heading">Mean gender pay gap using bonus pay</h3>
                </legend>

                @(Html.GovUkTextInputFor(
                    m => m.DiffMeanBonusPercent,
                    new LabelViewModel {Text = "Enter the difference in mean bonus pay"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = @<text>
                                   <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                </text>
                    }
                    ))
            </fieldset>

            <fieldset class="govuk-fieldset govuk-!-margin-top-8">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h3 class="govuk-fieldset__heading">Median gender pay gap using bonus pay</h3>
                </legend>

                @(Html.GovUkTextInputFor(
                    m => m.DiffMedianBonusPercent,
                    new LabelViewModel {Text = "Enter the difference in median bonus pay"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = @<text>
                                   <span class="govuk-label" style="display: inline; margin-left: 5px;">%</span>
                                </text>
                    }
                    ))
            </fieldset>

            @(Html.GovUkButton(new ButtonViewModel
            {
                Text = "Save and continue",
                Classes = "govuk-!-margin-bottom-6"
            }))

            <p class="govuk-body">
                <a class="govuk-link" href="@Url.Action("NewReportOverview", "NewReportOverview", new {encryptedOrganisationId = encryptedOrganisationId, reportingYear = Model.ReportingYear})">
                    Cancel and return to report overview
                </a>
            </p>
        </div>
        @await Html.PartialAsync("~/Views/Submit/NewRelatedContent.cshtml")
    </div>

</form>

@section AfterLoadedCompiledScripts {
    <script>
        function clearChildren(element) {
            for (var i = 0; i < element.childNodes.length; i++) {
                var e = element.childNodes[i];
                if (e.tagName && e.tagName.toLowerCase() === "input") {
                    e.value = null;
                } else {
                    clearChildren(e);
                }
            }
        }

        function showOrHidePayQuarters() {
            const payQuarters = document.getElementById("PayQuarters");
            if (!payQuarters) {
                return;
            }

            const optedOutOfReportingPayQuarters = document.getElementById("OptedOutOfReportingPayQuarters");
            if (optedOutOfReportingPayQuarters && optedOutOfReportingPayQuarters.checked) {
                payQuarters.style.display = "none";
                clearChildren(payQuarters);
            }
            else {
                payQuarters.style.display = "block";
            }
        }
    </script>
}
