@using GenderPayGap.Core.Helpers
@using GenderPayGap.WebUI.Views.Components.StatusMessages
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model GenderPayGap.WebUI.Models.Report.ReportFiguresViewModel

@{
    string encryptedOrganisationId = Encryption.EncryptId(Model.Organisation.OrganisationId);
    string formattedReportingYears = ReportingYearsHelper.FormatYearAsReportingPeriod(Model.ReportingYear);

    string editOrReportTitle = Model.IsEditingSubmittedReturn
        ? "Edit your gender pay gap"
        : "Report your gender pay gap";

    ViewBag.Title = $"{editOrReportTitle} - reporting year {formattedReportingYears} - {Model.Organisation.OrganisationName} - Gender pay gap service";
}

@section BeforeMain {
    @{
        var crumbs = new List<CrumbViewModel>
        {
            new CrumbViewModel
            {
                Text = "Manage Employers",
                Href = Url.Action("ManageOrganisationsGet", "ManageOrganisations")
            },
            new CrumbViewModel
            {
                Text = Model.Organisation.OrganisationName,
                Href = Url.Action("ManageOrganisationGet", "ManageOrganisations", new {encryptedOrganisationId})
            },
            new CrumbViewModel
            {
                Text = $"{formattedReportingYears} Reporting year",
                Href = Url.Action("ReportOverview", "ReportOverview", new { encryptedOrganisationId, reportingYear = Model.ReportingYear})
            },
            new CrumbViewModel
            {
                Text = "Figures"
            }
        };
    }

    @(await Html.GovUkBreadcrumbs(new BreadcrumbsViewModel
    {
        Crumbs = crumbs
    }))
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        @{ await Html.RenderPartialAsync("../Components/StatusMessages/StatusMessages", new StatusMessagesViewModel()); }
        @(await Html.GovUkErrorSummary(ViewData.ModelState))

        <h1 class="govuk-heading-xl">
            Enter gender pay gap data
            <br/>
            <span class="govuk-!-font-size-27 govuk-!-margin-top-3" style="display: inline-block; line-height: 1.3 !important;">
                Reporting as @(Model.Organisation.OrganisationName)
                <br/>
                for snapshot date
                @(Model.Organisation.SectorType.GetAccountingStartDate(Model.ReportingYear).ToString("d MMMM yyyy"))
            </span>
        </h1>
        
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
    
        <p class="govuk-body">
            Enter your figures as whole percentages or rounded to one decimal place.
        </p>
    
        <form method="post" action="@Url.Action("ReportFiguresPost", "ReportFigures", new { encryptedOrganisationId, reportingYear = Model.ReportingYear })">
            @(Html.AntiForgeryToken())
            @Html.HiddenFor(m => m.IsEditingForTheFirstTime)

            <fieldset id="HourlyPayFieldset" class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h2 class="govuk-heading-l">Hourly pay</h2>
                    <h3 class="govuk-heading-s">Gender pay gap</h3>
                    <p class="govuk-caption-m">If women in your organisation are paid more than men, enter a negative percentage figure – for example -12%.</p>
                </legend>
                
                @if (ReportingYearsHelper.IsReportingYearWithFurloughScheme(Model.ReportingYear))
                {
                    @await Html.GovUkCheckboxItemFor(
                        m => m.OptedOutOfReportingPayQuarters,
                        new LabelViewModel
                        {
                            Text = "If any employees go on reduced pay as a result of the Coronavirus Job Retention Scheme "
                                   + "(furlough), they would no longer count as 'full-pay relevant employees'. "
                                   + "If your organisation had three or fewer full-pay relevant employees on the "
                                   + "snapshot date, you can opt-out of providing quarter data by checking this box."
                        },
                        null,
                        null,
                        false,
                        "showOrHidePayQuarters();"
                        )
                }

                @{
                    string payQuartersDisplay = Model.OptedOutOfReportingPayQuarters ? "none" : "block";
                    Func<object, object> percentageText = @<text>
                                                              <span class="govuk-label govuk-!-margin-left-1 govuk-!-display-inline">%</span>
                                                           </text>;

                    @(await Html.GovUkTextInputFor(
                        m => m.DiffMeanHourlyPayPercent,
                        new LabelViewModel
                        {
                            Html = @<text>
                                       Enter the <span class="govuk-!-font-weight-bold">mean (average)</span> gender pay gap for hourly pay
                                    </text>
                        },
                        classes: "govuk-input--width-10",
                        textInputAppendix: new TextInputAppendixViewModel
                        {
                            Html = percentageText
                        }
                        ))

                    @(await Html.GovUkTextInputFor(
                        m => m.DiffMedianHourlyPercent,
                        new LabelViewModel
                        {
                            Html = @<text>
                                       Enter the <span class="govuk-!-font-weight-bold">median</span> gender pay gap for hourly pay
                                    </text>
                        },
                        classes: "govuk-input--width-10",
                        textInputAppendix: new TextInputAppendixViewModel
                        {
                            Html = percentageText
                        }
                        ))

                    <div id="PayQuarters" style="display: @payQuartersDisplay">
                        <h3 class="govuk-heading-s">Upper hourly pay quarter</h3>
                        
                        @(await Html.GovUkTextInputFor(
                               m => m.FemaleUpperPayBand,
                               new LabelViewModel {Text = "Women"},
                               classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        @(await Html.GovUkTextInputFor(
                            m => m.MaleUpperPayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        <h3 class="govuk-heading-s">Upper middle hourly pay quarter</h3>
                        
                        @(await Html.GovUkTextInputFor(
                            m => m.FemaleUpperMiddlePayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        @(await Html.GovUkTextInputFor(
                            m => m.MaleUpperMiddlePayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        <h3 class="govuk-heading-s">Lower middle hourly pay quarter</h3>

                        @(await Html.GovUkTextInputFor(
                            m => m.FemaleLowerMiddlePayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        @(await Html.GovUkTextInputFor(
                            m => m.MaleLowerMiddlePayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        <h3 class="govuk-heading-s">Lower hourly pay quarter</h3>

                        @(await Html.GovUkTextInputFor(
                            m => m.FemaleLowerPayBand,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                        @(await Html.GovUkTextInputFor(
                            m => m.MaleLowerPayBand,
                            new LabelViewModel {Text = "Men"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                        
                    </div>
                }
            </fieldset>
        
            <fieldset id="BonusPayFieldset" class="govuk-fieldset govuk-!-margin-top-8">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h2 class="govuk-heading-l">Bonus pay</h2>
                    <h3 class="govuk-heading-s">Gender pay gap</h3>
                    <p class="govuk-caption-m">If women in your organisation are paid more than men, enter a negative percentage figure – for example -12%.</p>
                </legend>
                
                @(await Html.GovUkTextInputFor(
                    m => m.DiffMeanBonusPercent,
                    new LabelViewModel
                    {
                        Html = @<text>
                                   Enter the <span class="govuk-!-font-weight-bold">mean (average)</span> gender pay gap for bonus pay
                                </text>
                    },
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = percentageText
                    }
                    ))
                @(await Html.GovUkTextInputFor(
                    m => m.DiffMedianBonusPercent,
                    new LabelViewModel
                    {
                        Html = @<text>
                                   Enter the <span class="govuk-!-font-weight-bold">median</span> gender pay gap for bonus pay
                                </text>
                    },
                    classes: "govuk-input--width-10 govuk-!-margin-bottom-3",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = percentageText
                    }
                    ))
                
                <h3 class="govuk-heading-s">Percentage who received bonus pay</h3>
                
                @(await Html.GovUkTextInputFor(
                            m => m.FemaleBonusPayPercent,
                            new LabelViewModel {Text = "Women"},
                            classes: "govuk-input--width-10",
                            textInputAppendix: new TextInputAppendixViewModel
                            {
                                Html = percentageText
                            }
                            ))
                
                @(await Html.GovUkTextInputFor(
                    m => m.MaleBonusPayPercent,
                    new LabelViewModel {Text = "Men"},
                    classes: "govuk-input--width-10",
                    textInputAppendix: new TextInputAppendixViewModel
                    {
                        Html = percentageText
                    }
                    ))
            </fieldset>
        
            <p class="govuk-body">
                Selecting continue will save a draft of your gender pay gap figures. 
                You will be able to review and edit before submitting your gender pay gap information.
            </p>
        
            @(await Html.GovUkButton(new ButtonViewModel
            {
                Text = "Save and continue",
                Classes = "govuk-!-margin-bottom-6 govuk-!-margin-top-4"
            }))

            <p class="govuk-body">
                <a class="govuk-link" href="@Url.Action("ManageOrganisationGet", "ManageOrganisations", new {encryptedOrganisationId})">
                    Cancel and return to @(Model.Organisation.OrganisationName)
                </a>
            </p>

        </form>

    </div>
    @await Html.PartialAsync("~/Views/Submit/RelatedContent.cshtml")
</div>


@section AfterLoadedCompiledScripts {
    <script>
        function clearChildren(element) {
            for (var i = 0; i < element.childNodes.length; i++) {
                var e = element.childNodes[i];
                if (e.tagName && e.tagName.toLowerCase() === "input") {
                    e.value = null;
                } else {
                    clearChildren(e);
                }
            }
        }

        function showOrHidePayQuarters() {
            const payQuarters = document.getElementById("PayQuarters");
            if (!payQuarters) {
                return;
            }

            const optedOutOfReportingPayQuarters = document.getElementById("OptedOutOfReportingPayQuarters");
            if (optedOutOfReportingPayQuarters && optedOutOfReportingPayQuarters.checked) {
                payQuarters.style.display = "none";
                clearChildren(payQuarters);
            }
            else {
                payQuarters.style.display = "block";
            }
        }
    </script>
}
