{"version":3,"sources":["../../../src/components/config/dsUpgrade.js"],"names":["DatasourceUpgrader","contextSrv","backendSrv","$q","datasourceSrv","$scope","apiKey","keyRequest","upgradeed","upgraded","datasources","getAll","raintank","getDatasourceByName","exec","url","raintankEvents","hasRole","canUpgrade","configureDatasource","when","self","get","then","resp","meta","code","reject","body","results","graphite","elastic","_","forEach","ds","name","getDatasources","promise","type","access","basicAuth","basicAuthPassword","basicAuthUser","jsonData","getKey","post","isMatch","put","id","merge","database","esVersion","interval","timeField","result","settings","datasourceConfig","init","isArray","find"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { promiseToDigest } from '../../utils/promiseToDigest';\n\nexport default class DatasourceUpgrader {\n  constructor(contextSrv, backendSrv, $q, datasourceSrv, $scope) {\n    this.backendSrv = backendSrv;\n    this.contextSrv = contextSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$q = $q;\n    this.$scope = $scope;\n    this.apiKey = \"\";\n    this.keyRequest = null;\n    this.upgradeed = false;\n  }\n\n  needsUpgrade() {\n    if (this.upgraded) {\n      return false;\n    }\n\n    if (!this.datasourceSrv) {\n      return false;\n    }\n\n    const datasources = this.datasourceSrv.getAll();\n\n    const raintank = getDatasourceByName(datasources, 'raintank');\n\n    if (!raintank || !/^\\/api\\/datasources\\/proxy/.exec(raintank.url)) {\n      return true;\n    }\n\n    const raintankEvents = getDatasourceByName(datasources, 'raintankEvents');\n\n    if (!raintankEvents || !/^\\/api\\/datasources\\/proxy/.exec(raintankEvents.url)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  canUpgrade() {\n    // only admins can modify datasources.\n    return this.contextSrv.hasRole(\"Admin\");\n  }\n\n  upgrade() {\n    if (this.canUpgrade()) {\n      return this.configureDatasource();\n    } else {\n      return this.$q.when();\n    }\n  }\n\n  getKey() {\n    // if we have already fetched the key, they just return it.\n    if (this.apiKey !== \"\") {\n      return this.$q.when(this.apiKey);\n    }\n    // if we are currently fetching the key, then just return the promise.\n    // when it resolves, it will provide the key.\n    if (this.keyRequest) {\n      return this.keyRequest;\n    }\n\n    // fetch the key from the worldping-api\n    var self = this;\n    this.keyRequest = promiseToDigest(this.$scope)(this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/_key')\n    .then((resp) => {\n      if (resp.meta.code !== 200) {\n        return self.$q.reject(\"failed to get current apiKey\");\n      }\n      return resp.body.apiKey;\n    }));\n    return this.keyRequest;\n  }\n\n  getDatasources() {\n    var self = this;\n    //check for existing datasource.\n    return promiseToDigest(this.$scope)(\n       self.backendSrv.get('/api/datasources')\n      .then((results) => {\n        var datasources = {\n          graphite: null,\n          elastic: null\n        };\n        _.forEach(results, function(ds) {\n          if (ds.name === \"raintank\") {\n            datasources.graphite = ds;\n          }\n          if (ds.name === \"raintankEvents\") {\n            datasources.elastic = ds;\n          }\n        });\n        return datasources;\n      })\n    );\n  }\n\n  configureDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return this.getDatasources().then((datasources) => {\n      var promise = self.$q.when();\n\n      var graphite = {\n        name: 'raintank',\n        type: 'graphite',\n        url: 'https://tsdb-gw.raintank.io/graphite/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: \"\",\n        basicAuthUser: \"\",\n        jsonData: {}\n      };\n      if (!datasources.graphite) {\n        // create datasource.\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          graphite.basicAuthUser = \"api_key\";\n          graphite.basicAuthPassword = apiKey;\n          return promiseToDigest(this.$scope)(self.backendSrv.post('/api/datasources', graphite));\n        }));\n      } else if (!_.isMatch(datasources.graphite, graphite)) {\n        // update datasource if necessary\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          graphite.basicAuthUser = \"api_key\";\n          graphite.basicAuthPassword = apiKey;\n          return promiseToDigest(this.$scope)\n            (self.backendSrv.put('/api/datasources/' + datasources.graphite.id, _.merge({}, datasources.graphite, graphite)));\n        }));\n      }\n\n      var elastic = {\n        name: 'raintankEvents',\n        type: 'elasticsearch',\n        url: 'https://tsdb-gw.raintank.io/elasticsearch/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: \"\",\n        basicAuthUser: \"\",\n        database: '[events-]YYYY-MM-DD',\n        jsonData: {\n          esVersion: 2,\n          interval: \"Daily\",\n          timeField: \"timestamp\"\n        }\n      };\n\n      if (!datasources.elastic) {\n        // create datasource.\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          elastic.basicAuthUser = \"api_key\";\n          elastic.basicAuthPassword = apiKey;\n          return promiseToDigest(this.$scope)(self.backendSrv.post('/api/datasources', elastic));\n        }));\n      } else if (!_.isMatch(datasources.elastic, elastic)) {\n        // update datasource if necessary\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          elastic.basicAuthUser = \"api_key\";\n          elastic.basicAuthPassword = apiKey;\n          return promiseToDigest(this.$scope)\n            (self.backendSrv.put('/api/datasources/' + datasources.elastic.id, _.merge({}, datasources.elastic, elastic)));\n        }));\n      }\n\n      return promise;\n    }).then(result => {\n      self.upgraded = true;\n\n      return promiseToDigest(this.$scope)(this.backendSrv.get('/api/frontend/settings').then(settings => {\n        // update datasource config\n        var datasourceConfig = this.datasourceSrv.getAll();\n        datasourceConfig.raintank = settings.datasources.raintank;\n        datasourceConfig.raintankEvents = settings.datasources.raintankEvents;\n        this.datasourceSrv.init();\n\n        return result;\n      }));\n    });\n  }\n}\n\nfunction getDatasourceByName(datasources, name) {\n  if (_.isArray(datasources)) {\n    return _.find(datasources, { name });\n  } else {\n    return datasources[name];\n  }\n}\n"],"file":"dsUpgrade.js"}