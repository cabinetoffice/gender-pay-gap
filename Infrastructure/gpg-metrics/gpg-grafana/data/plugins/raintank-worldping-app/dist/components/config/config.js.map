{"version":3,"sources":["../../../src/components/config/config.js"],"names":["WorldPingConfigCtrl","$scope","$injector","$q","backendSrv","alertSrv","contextSrv","datasourceSrv","validKey","quotas","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","org","datasourceUpgrader","DatasourceUpgrader","appModel","jsonData","secureJsonData","enabled","validateKey","apiKeySet","errorMsg","self","p","get","then","resp","meta","code","set","message","reject","body","getOrgDetails","statusText","apiKey","millionChecksPerMonth","Math","ceil","parseInt","checksPerMonth","strChecksPerMonth","model","resolve","upgraded","upgrade","importDashboards","url","template","configTemplate"],"mappings":"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","sourcesContent":["import configTemplate from './config.html!text';\nimport DatasourceUpgrader from './dsUpgrade';\nimport { promiseToDigest } from '../../utils/promiseToDigest';\n\nclass WorldPingConfigCtrl {\n  constructor($scope, $injector, $q, backendSrv, alertSrv, contextSrv, datasourceSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.validKey = false;\n    this.quotas = {};\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    this.org = null;\n    this.datasourceUpgrader = new DatasourceUpgrader(contextSrv, backendSrv, $q, datasourceSrv, $scope);\n    this.$scope = $scope;\n\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    if (this.appModel.enabled) {\n      this.validateKey();\n    }\n  }\n\n  reset() {\n    this.appModel.jsonData.apiKeySet=false;\n    this.validKey = false;\n    this.errorMsg = \"\";\n    this.org = null;\n  }\n\n  validateKey() {\n    const self = this;\n    const p = promiseToDigest(this.$scope)(this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/v2/quotas'));\n    p.then((resp) => {\n      if (resp.meta.code !== 200) {\n        self.alertSrv.set(\"failed to get Quotas\", resp.message, 'error', 10000);\n        return self.$q.reject(resp.message);\n      }\n      self.validKey = true;\n      self.errorMsg = \"\";\n      self.quotas = resp.body;\n\n      self.getOrgDetails();\n    }, (resp) => {\n      if (self.appModel.enabled) {\n        self.alertSrv.set(\"failed to verify apiKey\", resp.statusText, 'error', 10000);\n        self.appModel.enabled = false;\n        self.appModel.jsonData.apiKeySet = false;\n        self.appModel.secureJsonData.apiKey = \"\";\n        self.errorMsg = \"invalid apiKey\";\n        self.validKey = false;\n      }\n    });\n    return p;\n  }\n\n  getOrgDetails() {\n    const self = this;\n    const p = promiseToDigest(this.$scope)(this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/grafana-net/profile/org'));\n    p.then((resp) => {\n      self.org = resp;\n\n      const millionChecksPerMonth = Math.ceil(parseInt(self.org.checksPerMonth, 10) / 100000) / 10;\n      if (millionChecksPerMonth > 1000) {\n        self.org.strChecksPerMonth = Math.ceil(millionChecksPerMonth / 1000) + ' Billion';\n      } else if (millionChecksPerMonth > 0) {\n        self.org.strChecksPerMonth = millionChecksPerMonth + ' Million';\n      } else {\n        self.org.strChecksPerMonth = 'N/A';\n      }\n    }, (resp) => {\n      self.alertSrv.set(\"failed to get Org Details\", resp.statusText, 'error', 10000);\n    });\n    return p;\n  }\n\n  preUpdate() {\n    var model = this.appModel;\n    if (!model.enabled) {\n      model.jsonData.apiKeySet = false;\n      model.secureJsonData.apiKey = \"\";\n      return this.$q.resolve();\n    }\n\n    if (!model.jsonData.apiKeySet && !model.secureJsonData.apiKey) {\n      model.enabled = false;\n      this.errorMsg = \"apiKey not set\";\n      this.validKey = false;\n      return this.$q.reject(\"apiKey not set.\");\n    }\n\n    this.datasourceUpgrader.upgraded = true;\n    model.jsonData.apiKeySet = true;\n    return this.$q.resolve();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    var self = this;\n    return this.validateKey()\n    .then(() => {\n      return self.datasourceUpgrader.upgrade().then(() => {\n        self.appEditCtrl.importDashboards().then(() => {\n          return {\n            url: \"dashboard/db/worldping-home\",\n            message: \"worldPing app installed!\"\n          };\n        });\n      });\n    });\n  }\n}\n\nWorldPingConfigCtrl.template = configTemplate;\n\nexport {\n  WorldPingConfigCtrl as ConfigCtrl\n};\n"],"file":"config.js"}