// <auto-generated />
using System;
using GenderPayGap.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GenderPayGap.Database.Migrations
{
    [DbContext(typeof(GpgDatabaseContext))]
    [Migration("20200903151620_AddOrganisationSectorsTable")]
    partial class AddOrganisationSectorsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GenderPayGap.Database.InactiveUserOrganisation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmAttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ConfirmAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Method")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MethodId")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PIN")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PINConfirmedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PINSentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PITPNotifyLetterId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "OrganisationId")
                        .HasName("PK_dbo.InactiveUserOrganisations");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("InactiveUserOrganisations");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.AuditLog", b =>
                {
                    b.Property<long>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DetailsString")
                        .HasColumnType("text");

                    b.Property<long?>("ImpersonatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalUserId")
                        .HasColumnType("bigint");

                    b.HasKey("AuditLogId");

                    b.HasIndex("ImpersonatedUserId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OriginalUserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.DraftReturn", b =>
                {
                    b.Property<long>("DraftReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AccountingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CompanyLinkToGPGInfo")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiffMeanBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMeanHourlyPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMedianBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMedianHourlyPercent")
                        .HasColumnType("numeric");

                    b.Property<string>("EHRCResponse")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedOrganisationId")
                        .HasColumnType("text");

                    b.Property<decimal?>("FemaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool?>("HasDraftBeenModifiedDuringThisSession")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDifferentFromDatabase")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInScopeForThisReportYear")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLateSubmission")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVoluntarySubmission")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("LastWrittenByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastWrittenDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LateReason")
                        .HasColumnType("text");

                    b.Property<string>("LatestAddress")
                        .HasColumnType("text");

                    b.Property<string>("LatestOrganisationName")
                        .HasColumnType("text");

                    b.Property<string>("LatestSector")
                        .HasColumnType("text");

                    b.Property<decimal?>("MaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("text");

                    b.Property<int?>("OrganisationSize")
                        .HasColumnType("integer");

                    b.Property<string>("OriginatingAction")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReportModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ReportingRequirement")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReportingStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ReturnId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<int?>("SectorType")
                        .HasColumnType("integer");

                    b.Property<bool?>("ShouldProvideLateReason")
                        .HasColumnType("boolean");

                    b.Property<int>("SnapshotYear")
                        .HasColumnType("integer");

                    b.HasKey("DraftReturnId");

                    b.ToTable("DraftReturns");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("ActionsToCloseGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Charity")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CloseOrganisationGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CompanyIntranet")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Details")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int?>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("EmployeeInterestedInOrganisationData")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EmployerUnion")
                        .HasColumnType("boolean");

                    b.Property<int>("FeedbackStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("FindOutAboutGpg")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenAnonymised")
                        .HasColumnType("boolean");

                    b.Property<bool?>("InternetSearch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("LobbyGroup")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ManagerInvolvedInGpgReport")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NewsArticle")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OtherPerson")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherPersonText")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("OtherReason")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherReasonText")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("OtherSource")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherSourceText")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("PersonInterestedInGeneralGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PersonInterestedInSpecificOrganisationGpg")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("Report")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReportOrganisationGpgData")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ResponsibleForReportingGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SocialMedia")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ViewSpecificOrganisationGpg")
                        .HasColumnType("boolean");

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.ReminderEmail", b =>
                {
                    b.Property<long>("ReminderEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateChecked")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganisationSector")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ReminderEmailId");

                    b.HasIndex("UserId");

                    b.ToTable("ReminderEmails");
                });

            modelBuilder.Entity("GenderPayGap.Database.Organisation", b =>
                {
                    b.Property<long>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyNumber")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfCessation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployerReference")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastCheckedAgainstCompaniesHouse")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LatestPublicSectorTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("OptedOutFromCompaniesHouseUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sector")
                        .HasColumnName("SectorTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SectorDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SectorDetails")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationId")
                        .HasName("PK_dbo.Organisations");

                    b.HasIndex("CompanyNumber")
                        .IsUnique();

                    b.HasIndex("EmployerReference")
                        .IsUnique();

                    b.HasIndex("LatestPublicSectorTypeId");

                    b.HasIndex("OrganisationName");

                    b.HasIndex("Sector");

                    b.HasIndex("Status");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationAddress", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Address3")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("County")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsUkAddress")
                        .HasColumnType("boolean");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PoBox")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PostCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Source")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TownCity")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("AddressId")
                        .HasName("PK_dbo.OrganisationAddresses");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Status");

                    b.HasIndex("StatusDate");

                    b.ToTable("OrganisationAddresses");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationName", b =>
                {
                    b.Property<long>("OrganisationNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationNameId")
                        .HasName("PK_dbo.OrganisationNames");

                    b.HasIndex("Created");

                    b.HasIndex("Name");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationNames");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationPublicSectorType", b =>
                {
                    b.Property<long>("OrganisationPublicSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int>("PublicSectorTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Retired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Source")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationPublicSectorTypeId")
                        .HasName("PK_dbo.OrganisationPublicSectorTypes");

                    b.HasIndex("Created");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PublicSectorTypeId");

                    b.HasIndex("Retired");

                    b.ToTable("OrganisationPublicSectorTypes");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationReference", b =>
                {
                    b.Property<long>("OrganisationReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ReferenceValue")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("OrganisationReferenceId")
                        .HasName("PK_dbo.OrganisationReferences");

                    b.HasIndex("Created");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ReferenceName");

                    b.HasIndex("ReferenceValue");

                    b.ToTable("OrganisationReferences");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationScope", b =>
                {
                    b.Property<long>("OrganisationScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CampaignId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmailAddress")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactFirstname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactLastname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ReadGuidance")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("RegisterStatus")
                        .HasColumnName("RegisterStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegisterStatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ScopeStatus")
                        .HasColumnName("ScopeStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScopeStatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SnapshotDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationScopeId")
                        .HasName("PK_dbo.OrganisationScopes");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RegisterStatus");

                    b.HasIndex("ScopeStatus");

                    b.HasIndex("ScopeStatusDate");

                    b.HasIndex("SnapshotDate");

                    b.HasIndex("Status");

                    b.ToTable("OrganisationScopes");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationSector", b =>
                {
                    b.Property<long>("OrganisationSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Sector")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SectorDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SectorDetails")
                        .HasColumnType("text");

                    b.HasKey("OrganisationSectorId");

                    b.HasIndex("ByUserId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationSector");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationSicCode", b =>
                {
                    b.Property<long>("OrganisationSicCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Retired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SicCodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationSicCodeId")
                        .HasName("PK_dbo.OrganisationSicCodes");

                    b.HasIndex("Created");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Retired");

                    b.HasIndex("SicCodeId");

                    b.ToTable("OrganisationSicCodes");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationStatus", b =>
                {
                    b.Property<long>("OrganisationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationStatusId")
                        .HasName("PK_dbo.OrganisationStatus");

                    b.HasIndex("ByUserId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("StatusDate");

                    b.ToTable("OrganisationStatus");
                });

            modelBuilder.Entity("GenderPayGap.Database.PublicSectorType", b =>
                {
                    b.Property<int>("PublicSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("PublicSectorTypeId")
                        .HasName("PK_dbo.PublicSectorTypes");

                    b.ToTable("PublicSectorTypes");
                });

            modelBuilder.Entity("GenderPayGap.Database.Return", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccountingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyLinkToGPGInfo")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiffMeanBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DiffMeanHourlyPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMedianBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DiffMedianHourlyPercent")
                        .HasColumnType("numeric");

                    b.Property<bool>("EHRCResponse")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EHRCResponse")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<decimal>("FemaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FemaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FemaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FemaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FemaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsLateSubmission")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LateReason")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("MaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<int>("MaxEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MinEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Modifications")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("ReturnId")
                        .HasName("PK_dbo.Returns");

                    b.HasIndex("AccountingDate");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Status");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("GenderPayGap.Database.ReturnStatus", b =>
                {
                    b.Property<long>("ReturnStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReturnId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("ReturnStatusId")
                        .HasName("PK_dbo.ReturnStatus");

                    b.HasIndex("ByUserId");

                    b.HasIndex("ReturnId");

                    b.HasIndex("StatusDate");

                    b.ToTable("ReturnStatus");
                });

            modelBuilder.Entity("GenderPayGap.Database.SicCode", b =>
                {
                    b.Property<int>("SicCodeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SicSectionId")
                        .IsRequired()
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Synonyms")
                        .HasColumnType("text");

                    b.HasKey("SicCodeId")
                        .HasName("PK_dbo.SicCodes");

                    b.HasIndex("SicSectionId");

                    b.ToTable("SicCodes");
                });

            modelBuilder.Entity("GenderPayGap.Database.SicSection", b =>
                {
                    b.Property<string>("SicSectionId")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("SicSectionId")
                        .HasName("PK_dbo.SicSections");

                    b.ToTable("SicSections");
                });

            modelBuilder.Entity("GenderPayGap.Database.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AcceptedPrivacyStatement")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("AllowContact")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactEmailAddressDB")
                        .HasColumnName("ContactEmailAddress")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactJobTitle")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactLastName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactOrganisation")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddressDB")
                        .IsRequired()
                        .HasColumnName("EmailAddress")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailVerifyHash")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("EmailVerifySendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("HashingAlgorithm")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ResetAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResetSendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<bool>("SendUpdates")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("VerifyAttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VerifyAttempts")
                        .HasColumnType("integer");

                    b.HasKey("UserId")
                        .HasName("PK_dbo.Users");

                    b.HasIndex("ContactEmailAddressDB");

                    b.HasIndex("ContactPhoneNumber");

                    b.HasIndex("EmailAddressDB");

                    b.HasIndex("Status");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GenderPayGap.Database.UserOrganisation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmAttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ConfirmAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Method")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MethodId")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PIN")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PINConfirmedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PINSentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PITPNotifyLetterId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "OrganisationId")
                        .HasName("PK_dbo.UserOrganisations");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganisations");
                });

            modelBuilder.Entity("GenderPayGap.Database.UserStatus", b =>
                {
                    b.Property<long>("UserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnName("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserStatusId")
                        .HasName("PK_dbo.UserStatus");

                    b.HasIndex("ByUserId");

                    b.HasIndex("StatusDate");

                    b.HasIndex("UserId");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("GenderPayGap.Database.InactiveUserOrganisation", b =>
                {
                    b.HasOne("GenderPayGap.Database.OrganisationAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.AuditLog", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ImpersonatedUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatedUserId");

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("GenderPayGap.Database.User", "OriginalUser")
                        .WithMany()
                        .HasForeignKey("OriginalUserId");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.ReminderEmail", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany("ReminderEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.Organisation", b =>
                {
                    b.HasOne("GenderPayGap.Database.OrganisationPublicSectorType", "LatestPublicSectorType")
                        .WithMany("Organisations")
                        .HasForeignKey("LatestPublicSectorTypeId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.OrganisationPublicSectorTypes_LatestPublicSectorTypeId");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationAddress", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationAddresses")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationAddresses_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationName", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationNames")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationNames_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationPublicSectorType", b =>
                {
                    b.HasOne("GenderPayGap.Database.PublicSectorType", "PublicSectorType")
                        .WithMany()
                        .HasForeignKey("PublicSectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationReference", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationReferences")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationReferences_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationScope", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationScopes")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationScopes_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationSector", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId");

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationSectors")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationSicCode", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationSicCodes")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationSicCodes_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.SicCode", "SicCode")
                        .WithMany("OrganisationSicCodes")
                        .HasForeignKey("SicCodeId")
                        .HasConstraintName("FK_dbo.OrganisationSicCodes_dbo.SicCodes_SicCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationStatus", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationStatuses")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationStatus_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.Return", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("Returns")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.Returns_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.ReturnStatus", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.Return", "Return")
                        .WithMany("ReturnStatuses")
                        .HasForeignKey("ReturnId")
                        .HasConstraintName("FK_dbo.ReturnStatus_dbo.Returns_ReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.SicCode", b =>
                {
                    b.HasOne("GenderPayGap.Database.SicSection", "SicSection")
                        .WithMany("SicCodes")
                        .HasForeignKey("SicSectionId")
                        .HasConstraintName("FK_dbo.SicCodes_dbo.SicSections_SicSectionId")
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.UserOrganisation", b =>
                {
                    b.HasOne("GenderPayGap.Database.OrganisationAddress", "Address")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.OrganisationAddresses_AddressId");

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenderPayGap.Database.UserStatus", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany("UserStatuses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserStatus_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
