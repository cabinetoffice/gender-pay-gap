// <auto-generated />
using System;
using GenderPayGap.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GenderPayGap.Database.Migrations
{
    [DbContext(typeof(GpgDatabaseContext))]
    partial class GpgDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenderPayGap.Database.InactiveUserOrganisation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmAttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ConfirmAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Method")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("MethodId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PIN")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PINConfirmedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PINSentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PITPNotifyLetterId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "OrganisationId")
                        .HasName("PK_dbo.InactiveUserOrganisations");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("InactiveUserOrganisations");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.AuditLog", b =>
                {
                    b.Property<long>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AuditLogId"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DetailsString")
                        .HasColumnType("text");

                    b.Property<long?>("ImpersonatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalUserId")
                        .HasColumnType("bigint");

                    b.HasKey("AuditLogId");

                    b.HasIndex("ImpersonatedUserId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OriginalUserId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.DraftReturn", b =>
                {
                    b.Property<long>("DraftReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DraftReturnId"));

                    b.Property<string>("CompanyLinkToGPGInfo")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiffMeanBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMeanHourlyPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMedianBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMedianHourlyPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<decimal?>("MaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("OptedOutOfReportingPayQuarters")
                        .HasColumnType("boolean");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("OrganisationSize")
                        .HasColumnType("integer");

                    b.Property<int>("SnapshotYear")
                        .HasColumnType("integer");

                    b.HasKey("DraftReturnId");

                    b.ToTable("DraftReturns");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FeedbackId"));

                    b.Property<bool?>("ActionsToCloseGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Charity")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CloseOrganisationGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CompanyIntranet")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Details")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("EmployeeInterestedInOrganisationData")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EmployerUnion")
                        .HasColumnType("boolean");

                    b.Property<int>("FeedbackStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("FindOutAboutGpg")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenAnonymised")
                        .HasColumnType("boolean");

                    b.Property<bool?>("InternetSearch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("LobbyGroup")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ManagerInvolvedInGpgReport")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NewsArticle")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OtherPerson")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherPersonText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool?>("OtherReason")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherReasonText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool?>("OtherSource")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherSourceText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool?>("PersonInterestedInGeneralGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PersonInterestedInSpecificOrganisationGpg")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("Report")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReportOrganisationGpgData")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ResponsibleForReportingGpg")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SocialMedia")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ViewSpecificOrganisationGpg")
                        .HasColumnType("boolean");

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.ReminderEmail", b =>
                {
                    b.Property<long>("ReminderEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReminderEmailId"));

                    b.Property<DateTime>("DateChecked")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SectorType")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ReminderEmailId");

                    b.HasIndex("UserId", "SectorType", "ReminderDate");

                    b.ToTable("ReminderEmails", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.Organisation", b =>
                {
                    b.Property<long>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrganisationId"));

                    b.Property<string>("CompanyNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastCheckedAgainstCompaniesHouse")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LatestPublicSectorTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OptedOutFromCompaniesHouseUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SectorType")
                        .HasColumnType("integer")
                        .HasColumnName("SectorTypeId");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrganisationId")
                        .HasName("PK_dbo.Organisations");

                    b.HasIndex("CompanyNumber")
                        .IsUnique();

                    b.HasIndex("LatestPublicSectorTypeId");

                    b.HasIndex("OrganisationName");

                    b.HasIndex("SectorType");

                    b.HasIndex("Status");

                    b.ToTable("Organisations", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationAddress", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("County")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsUkAddress")
                        .HasColumnType("boolean");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PoBox")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TownCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AddressId")
                        .HasName("PK_dbo.OrganisationAddresses");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Status");

                    b.HasIndex("StatusDate");

                    b.ToTable("OrganisationAddresses", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationName", b =>
                {
                    b.Property<long>("OrganisationNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrganisationNameId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrganisationNameId")
                        .HasName("PK_dbo.OrganisationNames");

                    b.HasIndex("Created");

                    b.HasIndex("Name");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationNames", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationPublicSectorType", b =>
                {
                    b.Property<long>("OrganisationPublicSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrganisationPublicSectorTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int>("PublicSectorTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrganisationPublicSectorTypeId")
                        .HasName("PK_dbo.OrganisationPublicSectorTypes");

                    b.HasIndex("Created");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PublicSectorTypeId");

                    b.ToTable("OrganisationPublicSectorTypes", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationScope", b =>
                {
                    b.Property<long>("OrganisationScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrganisationScopeId"));

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ReadGuidance")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ScopeStatus")
                        .HasColumnType("integer")
                        .HasColumnName("ScopeStatusId");

                    b.Property<DateTime>("ScopeStatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SnapshotDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrganisationScopeId")
                        .HasName("PK_dbo.OrganisationScopes");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ScopeStatus");

                    b.HasIndex("ScopeStatusDate");

                    b.HasIndex("SnapshotDate");

                    b.HasIndex("Status");

                    b.ToTable("OrganisationScopes", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationSicCode", b =>
                {
                    b.Property<long>("OrganisationSicCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrganisationSicCodeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Retired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SicCodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrganisationSicCodeId")
                        .HasName("PK_dbo.OrganisationSicCodes");

                    b.HasIndex("Created");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Retired");

                    b.HasIndex("SicCodeId");

                    b.ToTable("OrganisationSicCodes", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationStatus", b =>
                {
                    b.Property<long>("OrganisationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrganisationStatusId"));

                    b.Property<long?>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrganisationStatusId")
                        .HasName("PK_dbo.OrganisationStatus");

                    b.HasIndex("ByUserId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("StatusDate");

                    b.ToTable("OrganisationStatus");
                });

            modelBuilder.Entity("GenderPayGap.Database.PublicSectorType", b =>
                {
                    b.Property<int>("PublicSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PublicSectorTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("PublicSectorTypeId")
                        .HasName("PK_dbo.PublicSectorTypes");

                    b.ToTable("PublicSectorTypes", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.Return", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReturnId"));

                    b.Property<DateTime>("AccountingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyLinkToGPGInfo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("DiffMeanBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DiffMeanHourlyPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiffMedianBonusPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DiffMedianHourlyPercent")
                        .HasColumnType("numeric");

                    b.Property<bool>("EHRCResponse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("EHRCResponse")
                        .HasDefaultValueSql("false");

                    b.Property<decimal?>("FemaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FemaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FemaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsLateSubmission")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LateReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("MaleLowerPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaleMedianBonusPayPercent")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleMiddlePayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleUpperPayBand")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaleUpperQuartilePayBand")
                        .HasColumnType("numeric");

                    b.Property<int>("MaxEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MinEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Modifications")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("OptedOutOfReportingPayQuarters")
                        .HasColumnType("boolean");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ReturnId")
                        .HasName("PK_dbo.Returns");

                    b.HasIndex("AccountingDate");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Status");

                    b.ToTable("Returns", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.SicCode", b =>
                {
                    b.Property<int>("SicCodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("SicSectionId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Synonyms")
                        .HasColumnType("text");

                    b.HasKey("SicCodeId")
                        .HasName("PK_dbo.SicCodes");

                    b.HasIndex("SicSectionId");

                    b.ToTable("SicCodes");
                });

            modelBuilder.Entity("GenderPayGap.Database.SicSection", b =>
                {
                    b.Property<string>("SicSectionId")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("SicSectionId")
                        .HasName("PK_dbo.SicSections");

                    b.ToTable("SicSections");
                });

            modelBuilder.Entity("GenderPayGap.Database.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<DateTime?>("AcceptedPrivacyStatement")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("AllowContact")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddressDB")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EmailAddress");

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailVerifyHash")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("EmailVerifySendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("HasBeenAnonymised")
                        .HasColumnType("boolean");

                    b.Property<int>("HashingAlgorithm")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NewEmailAddressDB")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NewEmailAddressRequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("text");

                    b.Property<int>("ResetAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResetSendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<bool>("SendUpdates")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VerifyAttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VerifyAttempts")
                        .HasColumnType("integer");

                    b.HasKey("UserId")
                        .HasName("PK_dbo.Users");

                    b.HasIndex("ContactPhoneNumber");

                    b.HasIndex("EmailAddressDB")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.UserOrganisation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmAttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ConfirmAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Method")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("MethodId")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PIN")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PINConfirmedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PINSentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PITPNotifyLetterId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "OrganisationId")
                        .HasName("PK_dbo.UserOrganisations");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganisations");
                });

            modelBuilder.Entity("GenderPayGap.Database.UserStatus", b =>
                {
                    b.Property<long>("UserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserStatusId"));

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserStatusId")
                        .HasName("PK_dbo.UserStatus");

                    b.HasIndex("ByUserId");

                    b.HasIndex("StatusDate");

                    b.HasIndex("UserId");

                    b.ToTable("UserStatus", (string)null);
                });

            modelBuilder.Entity("GenderPayGap.Database.InactiveUserOrganisation", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.AuditLog", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ImpersonatedUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatedUserId");

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("GenderPayGap.Database.User", "OriginalUser")
                        .WithMany()
                        .HasForeignKey("OriginalUserId");

                    b.Navigation("ImpersonatedUser");

                    b.Navigation("Organisation");

                    b.Navigation("OriginalUser");
                });

            modelBuilder.Entity("GenderPayGap.Database.Models.ReminderEmail", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany("ReminderEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenderPayGap.Database.Organisation", b =>
                {
                    b.HasOne("GenderPayGap.Database.OrganisationPublicSectorType", "LatestPublicSectorType")
                        .WithMany()
                        .HasForeignKey("LatestPublicSectorTypeId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.OrganisationPublicSectorTypes_LatestPublicSectorTypeId");

                    b.Navigation("LatestPublicSectorType");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationAddress", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationAddresses")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrganisationAddresses_dbo.Organisations_OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationName", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationNames")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrganisationNames_dbo.Organisations_OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationPublicSectorType", b =>
                {
                    b.HasOne("GenderPayGap.Database.PublicSectorType", "PublicSectorType")
                        .WithMany()
                        .HasForeignKey("PublicSectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicSectorType");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationScope", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationScopes")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrganisationScopes_dbo.Organisations_OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationSicCode", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationSicCodes")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrganisationSicCodes_dbo.Organisations_OrganisationId");

                    b.HasOne("GenderPayGap.Database.SicCode", "SicCode")
                        .WithMany("OrganisationSicCodes")
                        .HasForeignKey("SicCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrganisationSicCodes_dbo.SicCodes_SicCodeId");

                    b.Navigation("Organisation");

                    b.Navigation("SicCode");
                });

            modelBuilder.Entity("GenderPayGap.Database.OrganisationStatus", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("OrganisationStatuses")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrganisationStatus_dbo.Organisations_OrganisationId");

                    b.Navigation("ByUser");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("GenderPayGap.Database.Return", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("Returns")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Returns_dbo.Organisations_OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("GenderPayGap.Database.SicCode", b =>
                {
                    b.HasOne("GenderPayGap.Database.SicSection", "SicSection")
                        .WithMany("SicCodes")
                        .HasForeignKey("SicSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SicCodes_dbo.SicSections_SicSectionId");

                    b.Navigation("SicSection");
                });

            modelBuilder.Entity("GenderPayGap.Database.UserOrganisation", b =>
                {
                    b.HasOne("GenderPayGap.Database.Organisation", "Organisation")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.Organisations_OrganisationId");

                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.Users_UserId");

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenderPayGap.Database.UserStatus", b =>
                {
                    b.HasOne("GenderPayGap.Database.User", "ByUser")
                        .WithMany()
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenderPayGap.Database.User", "User")
                        .WithMany("UserStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserStatus_dbo.Users_UserId");

                    b.Navigation("ByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenderPayGap.Database.Organisation", b =>
                {
                    b.Navigation("OrganisationAddresses");

                    b.Navigation("OrganisationNames");

                    b.Navigation("OrganisationScopes");

                    b.Navigation("OrganisationSicCodes");

                    b.Navigation("OrganisationStatuses");

                    b.Navigation("Returns");

                    b.Navigation("UserOrganisations");
                });

            modelBuilder.Entity("GenderPayGap.Database.SicCode", b =>
                {
                    b.Navigation("OrganisationSicCodes");
                });

            modelBuilder.Entity("GenderPayGap.Database.SicSection", b =>
                {
                    b.Navigation("SicCodes");
                });

            modelBuilder.Entity("GenderPayGap.Database.User", b =>
                {
                    b.Navigation("ReminderEmails");

                    b.Navigation("UserOrganisations");

                    b.Navigation("UserStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
